This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: public/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    deploy.yml
prisma/
  schema.prisma
  seed.mjs
src/
  config/
    AppConfig.ts
    constants.ts
    environment.ts
    index.ts
    swagger.ts
  lib/
    ai/
      analyze-image.ts
      analyze-url.ts
      extract-code.ts
      fetch-ai.ts
      generate-article-meta.ts
      index.ts
      json-validator.ts
      keywords.ts
      models.ts
      summarize.ts
      summary-partition.ts
    bing/
      bing-search-web.ts
      bing.schema.ts
      index.ts
    cdn/
      cloudflare/
        transferImageToCDN.ts
        uploadFile.ts
      helpers/
        getBlobByUrl.ts
        getBufferByUrl.ts
      upfile-best/
        index.ts
        upfileBestFetchClient.ts
        upfileBestFetchServer.ts
        uploadMetaFile.ts
      index.ts
    cloud-storage/
      helper.ts
      index.ts
      storage-upload.ts
      types.ts
    email/
      elastic-email/
        index.ts
        sendForgotPassword.ts
        sendLoginViaMagicLink.ts
        sendVerificationCode.ts
      resend/
        index.ts
    google/
      google-oauth2.ts
      google-search.ts
      index.ts
      youtube-search.ts
      youtube.schema.ts
    network/
      ip.ts
    pagination/
      helper.ts
    payment/
      create-bill.ts
      lemonsqueezy.ts
      polar.ts
      sepay.ts
    playwright/
      browser-pool.ts
      get-html.ts
      get-images.ts
      index.ts
      screenshot.ts
    polar/
      index.ts
    proxy/
      index.ts
      proxy-utils.ts
      webshare-proxy.ts
    sitemap/
      submit-index.ts
      submit-sitemap.ts
    tracking/
      index.ts
    translate/
      index.ts
      settings.ts
      translate.ts
    upfile-best/
      get-upfile-key.ts
      index.ts
      upload-file.ts
    utils/
      mongodb/
        mongoObjectId.ts
      string/
        code-block.ts
        contain.ts
        count.ts
        extract.ts
        format.ts
        humanize.ts
        index.ts
        random.ts
        slug.ts
      ai-cost.ts
      array.ts
      buffer.ts
      country.ts
      cssVar.ts
      date.ts
      email.ts
      image.ts
      index.ts
      os.ts
      price.ts
      retry.ts
      time.ts
      tz-names.ts
      upload.ts
      wait.ts
    validation/
      index.ts
      validatePassword.ts
      validateUsername.ts
    youtube/
      types.ts
      youtube-caption-download.ts
      youtube-info.ts
      youtube-save.ts
      youtube-summary.ts
      youtube-to-article.ts
      youtube-transcript-playwright.ts
      youtube-transcript.ts
    auth.ts
    db.ts
    redis.ts
  middlewares/
    api_key_auth.ts
    check-plan-limits.ts
    csrf.ts
  modules/
    analytics/
      getAnalytics.ts
      getBrowsers.ts
      getClicks.ts
      getCountries.ts
      getDevices.ts
      getOs.ts
      getQrScans.ts
      getReferrers.ts
      index.ts
    databases/
      index.ts
      postgres.ts
      utils.ts
    metadata/
      index.ts
      metadata-crud.ts
      metadata-scrape.ts
    payment/
      index.ts
      manage-checkout.ts
      manage-plans.ts
    plan/
      cancel.ts
      index.ts
      plans.ts
      subscribe.ts
    response/
      api-response.ts
      index.ts
      respond-helper.ts
    review/
      index.ts
      review-crud.ts
      review-start.ts
      review-url-by-screenshot.ts
    screenshot/
      index.ts
      screenshot-crud.ts
    thumbnail/
      create-thumbnail.ts
      index.ts
      thumbnail-utils.ts
    user/
      create.ts
      get-user.ts
      index.ts
      user-mask.ts
    user-balance/
      index.ts
      user-balance-crud.ts
    web-url/
      index.ts
      web-url-crud.ts
      web-url-parse.ts
    workspace/
      generateWorkspaceByUser.ts
      index.ts
      initWorkspacePermissions.ts
    type.ts
  routes/
    api/
      api-bing.ts
      api-google.ts
      api-healthz.ts
      api-key.ts
      api-order.ts
      api-payment.ts
      api-profile.ts
      api-upload.ts
      index.ts
    auth/
      github.ts
      google.ts
      index.ts
      login.ts
      logout.ts
      router.ts
    pages/
      checkout.ts
      home.ts
      index.ts
      payment-success.ts
      pricing.ts
      privacy.ts
      profile.ts
      router.ts
      workspace-select.ts
    webhooks/
      polar-webhook.ts
      standard-webhook.ts
    main.ts
  styles/
    global.css
  views/
    common/
      button.ejs
      drawers.ejs
      footer.ejs
      head.ejs
      header-dashboard.ejs
      header.ejs
      input-tags.ejs
      input-upload.ejs
      link-copy.ejs
      logo-horizontal.ejs
      logo-verticle.ejs
      mobile-menu.ejs
      thumb-facebook.ejs
      thumb-twitter.ejs
    pages/
      404.ejs
      checkout-confirmation.ejs
      checkout-success.ejs
      home.ejs
      login.ejs
      payment-success.ejs
      pricing.ejs
      privacy.ejs
      profile.ejs
      workspace-select.ejs
    templates/
      share-template-01-random.ejs
      share-template-01.ejs
    master-dashboard.ejs
    master-template.ejs
    master.ejs
  env.ts
  server.ts
.continueignore
.cursorrules
.dockerignore
.gitignore
.prettierignore
.prettierrc.json
.windsurfrules
commitlint.config.cjs
docker-compose.postgresql.yaml
docker-compose.yaml
Dockerfile
eslint.config.js
lint-staged.config.cjs
package.json
README.md
tailwind.config.cjs
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="prisma/seed.mjs">
// @ts-nocheck
⋮----
const prisma = new PrismaClient();
⋮----
async function main() {
console.log("✔️ Seed done!");
⋮----
// Execute the main function
main()
.catch((e) => {
console.error(e);
process.exit(1);
⋮----
.finally(async () => {
await prisma.$disconnect();
</file>

<file path="src/config/AppConfig.ts">
// FIXME: Update this configuration file based on your project information
⋮----
import { env } from "@/env";
⋮----
get title(): string
</file>

<file path="src/config/constants.ts">
export enum AppRoleDefault {
  ADMIN = "admin",
  VIEWER = "viewer",
  PRO = "pro",
}
⋮----
export enum AppPermissionDefault {
  FULL_CONTROL = "full-control",
  WRITE = "write",
  READ = "read",
}
⋮----
export enum WorkspacePermissionDefault {
  FULL_CONTROL = "full-control",
  UPDATE = "update",
  INVITE = "invite",
  VIEW = "view",
}
⋮----
export enum WorkspaceRoleDefault {
  ADMIN = "admin",
  EDITOR = "editor",
  INVITER = "inviter",
  VIEWER = "viewer",
}
⋮----
export enum TagDefault {
  MEMBERSHIP = "membership",
  WORKSPACE = "workspace",
  PRODUCT = "product",
  CASH = "cash",
  MONTHLY = "monthly",
  ANNUAL = "annual",
}
</file>

<file path="src/config/environment.ts">
import AppConfig from "@/config/AppConfig";
⋮----
export const IsDev = () =>
⋮----
export const IsStag = () =>
⋮----
export const IsProd = () =>
⋮----
export const IsCanary = () =>
⋮----
export const IsLocal = () =>
</file>

<file path="src/config/index.ts">

</file>

<file path="src/lib/ai/analyze-image.ts">
import { z } from "zod";
⋮----
import { type AskAiResponse, fetchAi, VisionModelSchema } from "./fetch-ai";
import { validateJson } from "./json-validator";
⋮----
export type AnalyzeImageInput = z.infer<typeof AnalyzeImageSchema>;
⋮----
export type AnalyzeImageOptions = z.infer<typeof AnalyzeImageOptionsSchema>;
⋮----
export async function analyzeImage(input: AnalyzeImageInput, options?: AnalyzeImageOptions)
⋮----
// validate input
⋮----
export async function analyzeImageBase64(
  params: {
    base64: string;
    instructions?: string;
    systemPrompt?: string;
  },
  options?: AnalyzeImageOptions
)
</file>

<file path="src/lib/ai/analyze-url.ts">
import { z } from "zod";
⋮----
import { getHtmlContent } from "@/lib/playwright/get-html";
⋮----
import { type AskAiResponse, fetchAi, TextModelSchema } from "./fetch-ai";
import { validateJson } from "./json-validator";
⋮----
export type AnalyzeUrlInput = z.infer<typeof AnalyzeUrlSchema>;
⋮----
export type AnalyzeUrlOptions = z.infer<typeof AnalyzeUrlOptionsSchema>;
⋮----
export async function analyzeUrl(input: AnalyzeUrlInput, options?: AnalyzeUrlOptions)
⋮----
// Validate input
⋮----
// Fetch website content using Playwright
⋮----
// If htmlContent is an array, join the contents
⋮----
// Remove HTML tags and trim
⋮----
// Limit content length to prevent excessive token usage
// websiteContent = websiteContent.slice(0, 15000);
⋮----
// Set default prompts for harmful content detection
⋮----
// Fetch AI analysis
⋮----
// Validate and parse JSON response
</file>

<file path="src/lib/ai/extract-code.ts">
/**
 * Extract code from between backticks
 */
export function extractTextBetweenBackticks(input: string)
</file>

<file path="src/lib/ai/fetch-ai.ts">
import axios from "axios";
import axiosRetry from "axios-retry";
import { z } from "zod";
⋮----
import { env } from "@/env";
⋮----
import { calculateAiCostByUsage } from "../utils";
⋮----
// Retry configuration
⋮----
export type TextModel = z.infer<typeof TextModelSchema>;
⋮----
export type VisionModel = z.infer<typeof VisionModelSchema>;
⋮----
export type AskAiMessageContent = z.infer<typeof AskAiMessageContentSchema>;
⋮----
export type AskAiMessage = z.infer<typeof AskAiMessageSchema>;
⋮----
// Range: [0, 2]
⋮----
export type AskAiParams = z.infer<typeof AskAiParamsSchema>;
⋮----
/** Including images and tools if any */
⋮----
/** The tokens generated */
⋮----
/** Sum of the above two fields */
⋮----
/** The total cost of the request */
⋮----
export type AskAiResponseUsage = z.infer<typeof AskAiResponseUsageSchema>;
⋮----
// See "Error Handling" section
⋮----
export type AskAiError = z.infer<typeof AskAiErrorSchema>;
⋮----
export type AskAiResponseChoice = z.infer<typeof AskAiResponseChoiceSchema>;
⋮----
// Depending on whether you set "stream" to "true" and
// whether you passed in "messages" or a "prompt", you
// will get a different output shape
⋮----
created: z.number(), // Unix timestamp
⋮----
system_fingerprint: z.string(), // Only present if the provider supports it
⋮----
// Usage data is always returned for non-streaming.
// When streaming, you will get one usage object at
// the end accompanied by an empty choices array.
⋮----
export type AskAiResponse = z.infer<typeof AskAiResponseSchema>;
⋮----
export type ParamsResponse = z.infer<typeof ParamsResponseSchema>;
⋮----
/**
 * This API lets you query the top LLM sampling parameter configurations used by users on OpenRouter.
 * @param model - LLM model ID
 */
export async function getParams(model: string)
⋮----
"HTTP-Referer": `${env.BASE_URL}`, // Optional, for including your app on openrouter.ai rankings.
"X-Title": `${env.SITE_NAME} (${env.NODE_ENV})`, // Optional. Shows in rankings on openrouter.ai.
⋮----
export function extractContent(content: AskAiMessageContent): string
⋮----
export interface FetchAiOptions {
  debug?: boolean;
  /**
   * Timeout for the request
   * @default 5 minutes
   */
  timeout?: number;
  /**
   * Number of retries for the request
   * @default 3
   */
  maxRetries?: number;
}
⋮----
/**
   * Timeout for the request
   * @default 5 minutes
   */
⋮----
/**
   * Number of retries for the request
   * @default 3
   */
⋮----
export class FetchAiError extends Error
⋮----
constructor(options:
⋮----
export async function fetchAi(params: AskAiParams, options: FetchAiOptions =
⋮----
// re-configure axios retry if needed
⋮----
// if no model or models provided, use default APP_MODELS
⋮----
// stream response
⋮----
// non-stream response
⋮----
// calculate total cost
⋮----
/**
 * @example
 * {
  "model": "meta-llama/llama-3.1-8b-instruct:free",
  "messages": [
    {
      "role": "system",
      "content": "you are a helpful assistant"
    },
    {
      "role": "user",
      "content": "how are you?"
    }
  ],
  "stream": false,
  "temperature": 1
}
 */
</file>

<file path="src/lib/ai/generate-article-meta.ts">
import { type AskAiResponse, fetchAi } from "../ai";
import { jsonValidator } from "./json-validator";
⋮----
export type GenerateMetaOptions = {
  model?: string;
  additionalPrompt?: string;
};
⋮----
export type GeneratedArticleMeta = {
  title: string;
  short_desc: string;
  keywords: string[];
};
⋮----
export async function generateMeta(
  content: string,
  language: string,
  options?: GenerateMetaOptions
)
⋮----
// model: options?.model || "google/gemini-flash-1.5",
// models: ["google/gemini-flash-1.5", "google/gemini-pro-1.5", "anthropic/claude-3-haiku"],
</file>

<file path="src/lib/ai/index.ts">

</file>

<file path="src/lib/ai/json-validator.ts">
import chalk from "chalk";
import { z } from "zod";
⋮----
import { type AskAiMessage, type AskAiResponse, fetchAi, type TextModel, TextModelSchema } from ".";
⋮----
export type JsonValidatorOptions = z.infer<typeof JsonValidatorOptionsSchema>;
⋮----
export class JsonValidatorError extends Error
⋮----
constructor(public data:
⋮----
export async function jsonValidator(json: string, options?: JsonValidatorOptions)
⋮----
// throw error if max retries is greater than 5
⋮----
// throw error if attempts reached
⋮----
// Select model based on attempt number
⋮----
// Repeat high model for additional attempts
⋮----
// Recursively validate the snippet
</file>

<file path="src/lib/ai/keywords.ts">
import { type AskAiResponse, fetchAi } from "../ai";
import { jsonValidator } from "./json-validator";
⋮----
export type ClassifyKeywordsOptions = {
  model?: string;
  additionalPrompt?: string;
};
⋮----
export async function classifyKeywords(
  content: string,
  language: string,
  options?: ClassifyKeywordsOptions
)
⋮----
// model: options?.model || "google/gemini-flash-1.5",
// models: ["google/gemini-flash-1.5", "google/gemini-pro-1.5", "anthropic/claude-3-haiku"],
</file>

<file path="src/lib/ai/summarize.ts">
import { languages } from "../translate/settings";
import { type AskAiResponse, fetchAi, type TextModel } from "./fetch-ai";
⋮----
// usage purposes of the AI response content
⋮----
export type SummarizeOptions = {
  /**
   * AI Model in string (if provided, will override the models).
   * @example "mistralai/mixtral-8x7b-instruct:nitro"
   */
  model?: TextModel;
  /**
   * AI Models in array (if provided, will override the model).
   * @example ["mistralai/mixtral-8x7b-instruct:nitro", "anthropic/claude-3-haiku"]
   */
  models?: string[];
  length?: string | number;
  purpose?: string;
  toLanguage?: string | null;
  userPrompt?: string;
  additionalPrompt?: string;
  output?: "string" | "array" | "object";
};
⋮----
/**
   * AI Model in string (if provided, will override the models).
   * @example "mistralai/mixtral-8x7b-instruct:nitro"
   */
⋮----
/**
   * AI Models in array (if provided, will override the model).
   * @example ["mistralai/mixtral-8x7b-instruct:nitro", "anthropic/claude-3-haiku"]
   */
⋮----
export async function summarize(content: string, options?: SummarizeOptions)
⋮----
export type SummaryResponse = {
  name: string;
  description: string;
  content: string;
  parts: {
    title: string;
    from: string;
    to: string;
    url: string;
    second: number;
  }[];
  conclusion: string;
};
⋮----
export async function summarizeYoutubeTranscript(
  content: string,
  options: SummarizeOptions & { webURL: string }
)
⋮----
// model: options?.model || "google/gemini-flash-1.5",
// models: ["google/gemini-flash-1.5", "google/gemini-pro-1.5", "anthropic/claude-3-haiku"],
⋮----
// console.log("aiAnswer :>> ", aiAnswer);
</file>

<file path="src/lib/ai/summary-partition.ts">
import { languages } from "../translate/settings";
import { extractTextBetweenBackticks } from "../utils";
import { type AskAiResponse, fetchAi } from "./fetch-ai";
import { jsonValidator } from "./json-validator";
⋮----
export type PartitionResponse = {
  name: string;
  description: string;
  parts: {
    title: string;
    from: string;
    to: string;
    second: number;
    url: string;
  }[];
  conclusion: string;
};
⋮----
type PartitionOptions = {
  model?: string;
  length?: "short" | "medium" | "long";
  toLanguage?: string;
};
⋮----
export async function summaryPartition(summaryContent: string, options?: PartitionOptions)
⋮----
// model: options?.model || "google/gemini-flash-1.5",
// models: ["google/gemini-flash-1.5", "google/gemini-pro-1.5", "anthropic/claude-3-haiku"],
⋮----
// console.log("aiAnswer :>> ", aiAnswer);
</file>

<file path="src/lib/bing/bing-search-web.ts">
import axios from "axios";
⋮----
import { env } from "@/env";
⋮----
import type { BingWebSearchParams, BingWebSearchResponse } from "./bing.schema";
import { BingWebSearchParamsSchema } from "./bing.schema";
⋮----
/**
 * Performs a Bing web search with the given parameters
 * @param params Search parameters
 * @returns Search results
 */
export async function bingWebSearch(params: BingWebSearchParams): Promise<BingWebSearchResponse>
⋮----
// Validate input parameters
⋮----
// Prepare request URL and headers
⋮----
// Build query parameters
⋮----
// Make the API request
⋮----
// Process and transform the response
</file>

<file path="src/lib/bing/bing.schema.ts">
import { z } from "zod";
⋮----
"en-US", // United States (English)
"en-GB", // United Kingdom (English)
"en-CA", // Canada (English)
"en-AU", // Australia (English)
"fr-FR", // France (French)
"de-DE", // Germany (German)
"it-IT", // Italy (Italian)
"es-ES", // Spain (Spanish)
"pt-BR", // Brazil (Portuguese)
"zh-CN", // China (Chinese)
"ja-JP", // Japan (Japanese)
"ko-KR", // Korea (Korean)
"ru-RU", // Russia (Russian)
⋮----
"off", // Don't filter adult content
"moderate", // Filter adult images but not text
"strict", // Filter all adult content
⋮----
"day", // Content discovered in the past 24 hours
"week", // Content discovered in the past week
"month", // Content discovered in the past month
"year", // Content discovered in the past year
"all", // No freshness filter (default)
⋮----
responseFilter: z.string().optional(), // Filter to specific fields
⋮----
export type BingWebSearchParams = z.infer<typeof BingWebSearchParamsSchema>;
export type BingWebSearchResult = z.infer<typeof BingWebSearchResultSchema>;
export type BingWebSearchResponse = z.infer<typeof BingWebSearchResponseSchema>;
</file>

<file path="src/lib/bing/index.ts">

</file>

<file path="src/lib/cdn/cloudflare/transferImageToCDN.ts">
import guessMimeTypeByBuffer from "diginext-utils/dist/string/guessMimeTypeByBuffer";
import { randomFileName } from "diginext-utils/dist/string/random";
import { getExtensionFromMimeType } from "diginext-utils/dist/string/url";
⋮----
import { isCdnStorageAvaiable } from "@/lib/cdn";
import { uploadFile } from "@/lib/cdn/cloudflare/uploadFile";
import getBufferByUrl from "@/lib/cdn/helpers/getBufferByUrl";
⋮----
export default async function transferImageToCDN(url: string, directory: string = "")
⋮----
//
</file>

<file path="src/lib/cdn/cloudflare/uploadFile.ts">
import { PutObjectCommand, S3Client } from "@aws-sdk/client-s3";
import guessMimeTypeByBuffer from "diginext-utils/dist/string/guessMimeTypeByBuffer";
⋮----
import { IsProd } from "@/config";
import AppConfig from "@/config/AppConfig";
import { env } from "@/env";
import { isCdnStorageAvaiable } from "@/lib/cdn";
⋮----
const REGION = "auto"; // R2 doesn't require a region, but the SDK needs this parameter
⋮----
export async function uploadFile(fileContent: Buffer, fileName: string)
</file>

<file path="src/lib/cdn/helpers/getBlobByUrl.ts">
import axios from "axios";
⋮----
export default async function getBlobByUrl(url: string)
</file>

<file path="src/lib/cdn/helpers/getBufferByUrl.ts">
import axios from "axios";
⋮----
export default async function getBufferByUrl(url: string)
</file>

<file path="src/lib/cdn/upfile-best/index.ts">
import { env } from "@/env";
⋮----
export const configureUpfileBest = () =>
⋮----
//
⋮----
export const getApiUpfileBestUrl = (url = "") =>
</file>

<file path="src/lib/cdn/upfile-best/upfileBestFetchClient.ts">
import type { FetchResponse } from "@/lib/fetch/tfsFetchClient";
import { tfsFetchClient } from "@/lib/fetch/tfsFetchClient";
⋮----
import { getApiUpfileBestUrl } from ".";
⋮----
export default async function upfileBestFetchClient<T>({
  path,
  ...rest
}): Promise<FetchResponse<T>>
</file>

<file path="src/lib/cdn/upfile-best/upfileBestFetchServer.ts">
import { env } from "@/env";
import { configureUpfileBest, getApiUpfileBestUrl } from "@/lib/cdn/upfile-best";
import { type FetchResponse } from "@/lib/fetch/tfsFetchClient";
import { tfsFetchServer } from "@/lib/fetch/tfsFetchServer";
⋮----
export default async function upfileBestFetchServer<T>({
  path,
  headers,
  ...rest
}): Promise<FetchResponse<T>>
</file>

<file path="src/lib/cdn/upfile-best/uploadMetaFile.ts">
import getBlobByUrl from "@/lib/cdn/helpers/getBlobByUrl";
import upfileBestFetchServer from "@/lib/cdn/upfile-best/upfileBestFetchServer";
⋮----
export default async function uploadMetafile(url: string, directory: string = "")
⋮----
//
⋮----
// const blob = (await resize(file, { maxWidth: 2048, maxHeight: 2048 })) as Blob;
</file>

<file path="src/lib/cdn/index.ts">
import { toBool } from "diginext-utils/dist/object";
⋮----
export const isCdnStorageAvaiable = () =>
</file>

<file path="src/lib/cloud-storage/helper.ts">
/* eslint-disable prettier/prettier */
import { env } from "@/env";
⋮----
import type { ICloudStorage } from "./types";
⋮----
/**
 * Access URL for the storage bucket
 * @param storage
 * @returns
 */
export function getStorageBucketOrigin(storage: ICloudStorage)
⋮----
/**
 * Access host (domain) for the storage bucket
 * @param storage
 * @returns
 */
export function getStorageHost(storage: ICloudStorage)
⋮----
// cloudflare "baseUrl" is required
⋮----
/**
 * Get the origin URL for the uploaded file (private access)
 * @param storage
 * @param destFileName
 * @returns
 */
export function getUploadFileOriginEndpointUrl(storage: ICloudStorage, destFileName: string)
⋮----
/**
 * Get the public URL for the uploaded file
 * @param storage
 * @param destFileName
 * @returns
 */
export function getUploadFilePublicUrl(storage: ICloudStorage, destFileName: string)
⋮----
export function guessMimeTypeByBuffer(buffer: Buffer): string
⋮----
// More accurate checks for MP4 and QuickTime
⋮----
return "application/octet-stream"; // Default to binary data if unknown
</file>

<file path="src/lib/cloud-storage/index.ts">

</file>

<file path="src/lib/cloud-storage/storage-upload.ts">
import type { PutObjectCommandInput } from "@aws-sdk/client-s3";
import { ListBucketsCommand, PutObjectCommand, S3Client } from "@aws-sdk/client-s3";
import { NodeHttpHandler } from "@aws-sdk/node-http-handler";
⋮----
import { env } from "@/env";
⋮----
import { getImageBufferFromUrl, readFileToBuffer } from "../utils/image";
import {
  getUploadFileOriginEndpointUrl,
  getUploadFilePublicUrl,
  guessMimeTypeByBuffer,
} from "./helper";
import type { CloudStorageProvider, StorageUploadOptions } from "./types";
import type { ICloudStorage } from "./types";
⋮----
export function getCurrentStorage(): ICloudStorage
⋮----
export async function initStorage(storage: ICloudStorage)
⋮----
export async function listBuckets(storage: ICloudStorage)
⋮----
export async function uploadFileBuffer(
  buffer: Buffer,
  destFileName: string,
  options?: StorageUploadOptions
): Promise<
⋮----
export async function uploadFileURL(
  url: string,
  destFileName: string,
  options?: StorageUploadOptions
)
⋮----
export async function uploadFilePath(
  filePath: string,
  destFileName: string,
  options?: StorageUploadOptions
)
</file>

<file path="src/lib/cloud-storage/types.ts">
export type CloudStorageProvider = (typeof CLOUD_STORAGE_PROVIDERS)[number];
⋮----
export interface ICloudStorage {
  provider: CloudStorageProvider;
  region: string;
  bucket: string;
  accessKey: string;
  secretKey: string;
  endpoint: string;
  baseUrl?: string;
  basePath?: string;
}
⋮----
export interface StorageUploadOptions {
  storage?: ICloudStorage;
  debug?: boolean;
}
</file>

<file path="src/lib/email/elastic-email/sendForgotPassword.ts">
import { replace } from "lodash";
⋮----
import AppConfig from "@/config/AppConfig";
import type { IElasticSend } from "@/lib/email/elastic-email";
import elasticSend from "@/lib/email/elastic-email";
⋮----
const makeContent = (
⋮----
interface ISendVerificationCode extends Omit<IElasticSend, "content"> {
  content: {
    url: string;
  };
}
⋮----
export default async function sendForgotPassword(params: ISendVerificationCode)
⋮----
//
</file>

<file path="src/lib/email/elastic-email/sendLoginViaMagicLink.ts">
import { replace } from "lodash";
⋮----
import AppConfig from "@/config/AppConfig";
import type { IElasticSend } from "@/lib/email/elastic-email";
import elasticSend from "@/lib/email/elastic-email";
⋮----
const makeContent = (
⋮----
interface ISendVerificationCode extends Omit<IElasticSend, "content"> {
  content: {
    url: string;
  };
}
⋮----
export default async function sendLoginViaMagicLink(params: ISendVerificationCode)
⋮----
//
</file>

<file path="src/lib/email/elastic-email/sendVerificationCode.ts">
import { replace } from "lodash";
⋮----
import AppConfig from "@/config/AppConfig";
import type { IElasticSend } from "@/lib/email/elastic-email";
import elasticSend from "@/lib/email/elastic-email";
⋮----
const makeContent = (
⋮----
interface ISendVerificationCode extends Omit<IElasticSend, "content"> {
  content: {
    verificationLink: string;
    code: string;
  };
}
⋮----
export default async function sendVerificationCode(params: ISendVerificationCode)
⋮----
//
</file>

<file path="src/lib/email/resend/index.ts">
import { Resend } from "resend";
⋮----
import { EmailTemplate } from "@/components/email/subscription";
import { WaitlistConfirmation } from "@/components/email/waitlist-confirmation";
import EmailWaitlistOffer from "@/components/email/waitlist-offer";
import { env } from "@/env";
⋮----
export type Recipient = {
  name: string;
  email: string;
};
⋮----
async function sendEmail(recipients: Recipient[])
⋮----
export async function sendWaitlistOfferEmail(recipients: Recipient[])
</file>

<file path="src/lib/google/google-oauth2.ts">
import { JWT } from "google-auth-library";
⋮----
import { env } from "@/env";
⋮----
export async function getGoogleAccessToken(): Promise<string>
⋮----
// const keyFilePath = path.join(process.cwd(), 'path-to-your-service-account-key.json');
</file>

<file path="src/lib/google/index.ts">

</file>

<file path="src/lib/network/ip.ts">
import axios from "axios";
import type express from "express";
⋮----
export interface IPInfo {
  ip: string;
  ip_number: string;
  ip_version: number;
  country_name: string;
  country_code2: string;
  isp: string;
  response_code: string;
  response_message: string;
}
⋮----
export function getClientIp(req: express.Request)
⋮----
// Get user IP info
export async function getInfoIP(userIP: string, options?:
</file>

<file path="src/lib/pagination/helper.ts">
import { z } from "zod";
⋮----
export type Pagination = z.infer<typeof PaginationSchema>;
⋮----
export const getPagination = (page: number, totalCount: number, pageSize: number) =>
⋮----
// const total = Math.ceil(totalCount / pageSize);
</file>

<file path="src/lib/payment/create-bill.ts">
import type { Product, User } from "@prisma/client";
import { sumArray } from "diginext-utils/dist/array";
import { TimeSpan } from "lucia";
import { createDate } from "oslo";
⋮----
import { prisma } from "@/server/db";
⋮----
interface ICreateBill {
  user: User;
  cartIds: Array<string>;
  workspaceId?: string;
}
⋮----
function checkCurrencyConsistency(products: Array<Partial<Product>>)
⋮----
// Assuming all products should have the same currency as the first product in the array
⋮----
export default async function createBill(
⋮----
//
</file>

<file path="src/lib/payment/lemonsqueezy.ts">
import { lemonSqueezySetup } from "@lemonsqueezy/lemonsqueezy.js";
⋮----
/**
 * Ensures that required environment variables are set and sets up the Lemon
 * Squeezy JS SDK. Throws an error if any environment variables are missing or
 * if there's an error setting up the SDK.
 */
export function configureLemonSqueezy()
⋮----
//
⋮----
// "LEMONSQUEEZY_WEBHOOK_SECRET",
</file>

<file path="src/lib/payment/polar.ts">
import { Polar } from "@polar-sh/sdk";
⋮----
import { IsProd } from "@/config";
import { env } from "@/env";
⋮----
export type CancelReason = (typeof cancelReasons)[number];
⋮----
// eslint-disable-next-line @typescript-eslint/no-use-before-define
⋮----
export function initPolar()
⋮----
export async function listPolarProducts()
⋮----
export async function cancelPolarSubscription(
  polarSubscriptionId: string,
  options?: { reason?: CancelReason; immediately?: boolean }
)
</file>

<file path="src/lib/payment/sepay.ts">
import { env } from "@/env";
⋮----
export function getSepayQRCodeImageUrl(data: {
  bill_id: string;
  /**
   * In VND
   */
  order_value?: number;
})
⋮----
/**
   * In VND
   */
⋮----
/**
   * Cấu trúc link nhúng:
   * - SO_TAI_KHOAN (bắt buộc): Số tài khoản ngân hàng
   * - NGAN_HANG (bắt buộc): Tên của ngân hàng (bắt buộc). Danh sách tại đây.
   * - SO_TIEN (không bắt buộc): Số tiền chuyển khoản.
   * - NOI_DUNG (không bắt buộc): Nội dung chuyển khoản.
   *
   * Example:
   * `https://qr.sepay.vn/img?acc=0010000000355&bank=Vietcombank&amount=100000&des=ung%20ho%20quy%20bao%20tro%20tre%20em`
   *
   * Embed:
   * `<img src='https://qr.sepay.vn/img?acc=SO_TAI_KHOANH&bank=NGAN_HANG&amount=SO_TIEN&des=NOI_DUNG'/>`
   */
</file>

<file path="src/lib/playwright/browser-pool.ts">
import type { Browser } from "playwright";
import { chromium, firefox } from "playwright";
⋮----
class BrowserPool
⋮----
async initialize()
⋮----
async getBrowser(type: "firefox" | "chromium"): Promise<Browser>
⋮----
async closeBrowsers()
</file>

<file path="src/lib/playwright/get-html.ts">
import { wait } from "@/lib/utils/wait";
⋮----
import { type PlaywightProxy } from "../proxy";
import { browserPool } from "./browser-pool";
⋮----
interface HtmlContentOptions {
  proxy?: PlaywightProxy;
  delayAfterLoad?: number;
  debug?: boolean;
  timeout?: number;
  /** CSS selectors to extract specific elements instead of full HTML */
  selectors?: string[];
  /** Whether to return the first matching element or all matching elements */
  selectorMode?: "first" | "all";
}
⋮----
/** CSS selectors to extract specific elements instead of full HTML */
⋮----
/** Whether to return the first matching element or all matching elements */
⋮----
/**
 * Get HTML content from a URL using Playwright.
 * @param url - The URL to fetch HTML content from.
 * @param options - Options for the HTML content retrieval.
 * @returns A promise that resolves to the HTML content.
 */
export async function getHtmlContent(url: string, options: HtmlContentOptions =
⋮----
async function attemptGetHtmlContent(
    browserType: "firefox" | "chromium",
    useProxy = false
): Promise<string | string[]>
⋮----
// Optional delay after page load
⋮----
// Remove potentially intrusive elements
⋮----
// Get HTML content based on selectors or full page
⋮----
// Try Firefox without proxy first
⋮----
// Try Firefox with proxy
⋮----
// Try Chromium with proxy
⋮----
// Last attempt: Chromium without proxy
</file>

<file path="src/lib/playwright/get-images.ts">
import { wait } from "@/lib/utils/wait";
⋮----
import { type PlaywightProxy } from "../proxy";
import { browserPool } from "./browser-pool";
⋮----
interface ImageExtractionOptions {
  proxy?: PlaywightProxy;
  delayAfterLoad?: number;
  debug?: boolean;
  timeout?: number;
  excludeSelectors?: string[];
}
⋮----
export async function getAllImages(url: string, options: ImageExtractionOptions =
⋮----
async function attemptGetAllImages(
    browserType: "firefox" | "chromium",
    useProxy = false
): Promise<string[]>
⋮----
// Optional delay after page load
⋮----
// Remove potentially intrusive elements
⋮----
// Remove any additional excluded selectors
⋮----
// Extract all image URLs
⋮----
// Try Firefox without proxy first
⋮----
// Try Firefox with proxy
⋮----
// Try Chromium with proxy
⋮----
// Last attempt: Chromium without proxy
</file>

<file path="src/lib/playwright/index.ts">

</file>

<file path="src/lib/playwright/screenshot.ts">
import { wait } from "@/lib/utils/wait";
⋮----
import { type PlaywightProxy } from "../proxy";
import { browserPool } from "./browser-pool";
⋮----
interface ScreenshotOptions {
  fullPage?: boolean;
  type?: "png" | "jpeg";
  quality?: number;
  path?: string;
  size?: {
    width: number;
    height: number;
  };
  clip?: {
    x?: number;
    y?: number;
    width?: number;
    height?: number;
  };
  proxy?: PlaywightProxy;
  /**
   * Delay in milliseconds to wait after the page has loaded.
   */
  delayAfterLoad?: number;
  timeout?: number;
  debug?: boolean;
}
⋮----
/**
   * Delay in milliseconds to wait after the page has loaded.
   */
⋮----
export async function screenshot(url: string, options: ScreenshotOptions =
⋮----
async function attemptScreenshot(
    browserType: "firefox" | "chromium",
    useProxy = false
): Promise<Buffer>
⋮----
// wait for 3s and take screenshot
⋮----
// hide cookie consent, google login popup, facebook-login popup, etc
⋮----
/**
       * NOTE: Do not close browser, keep it in pool
       */
// await browser.close();
⋮----
// await browser.close();
⋮----
// Validate proxy if provided
// if (options.proxy) {
//   const isProxyValid = await testProxyConnection(
//     options.proxy.server,
//     options.proxy.username,
//     options.proxy.password
//   );
//   console.log("screenshot.ts > screenshot() > isProxyValid :>>", isProxyValid);
//   if (!isProxyValid) {
//     console.log("screenshot.ts > screenshot() > Proxy invalid, will attempt without proxy first");
//   }
// }
⋮----
// Try Firefox without proxy first
⋮----
// Try Firefox with proxy
⋮----
// Try Chromium with proxy
⋮----
// Last attempt: Chromium without proxy
</file>

<file path="src/lib/polar/index.ts">
import { Polar } from "@polar-sh/sdk";
import type { Organization } from "@polar-sh/sdk/models/components";
import axios from "axios";
import { createHash } from "crypto";
⋮----
import { env } from "@/env";
⋮----
export async function currentStore()
⋮----
export async function getPolarOrganizations()
⋮----
export async function getPolarOrg(id: string)
⋮----
export async function getPolarProducts()
⋮----
export async function getPolarOfficialProduct(id: string)
⋮----
export async function getPolarProduct(id: string)
⋮----
// const product = await polar.products.get({
//   id: productId,
// });
⋮----
export async function verifyCheckoutToken(token: string, options:
⋮----
export async function createCheckhoutUrl(
  productId: string,
  options: {
    userId?: string;
    userEmail?: string;
    successUrl: string;
    params?: Record<string, string>;
    debug?: boolean;
  }
)
⋮----
// Checkout requires a Price ID vs. Product
// We should improve the DX here either by:
// 1. Make it easy to copy Price vs. Product ID in dashboard
// 2. Allow passing Product ID to Checkout (throw error in case product has more
// than one price)
⋮----
// Create a hash to verify it later to avoid tampering
⋮----
// Append additional params
⋮----
// Create the checkout url
⋮----
export async function getPolarCheckout(checkoutId: string)
⋮----
export async function getPolarSubscriptions()
⋮----
export async function getPolarUserSubscriptions(polarUserId: string)
⋮----
export async function cancelAllPolarSubscriptions(polarUserId: string)
⋮----
export async function cancelProductSubscription(userId: string, productId: string)
</file>

<file path="src/lib/proxy/index.ts">

</file>

<file path="src/lib/proxy/proxy-utils.ts">
import axios from "axios";
import { HttpProxyAgent } from "http-proxy-agent";
import { z } from "zod";
⋮----
export type PlaywightProxy = z.infer<typeof PlaywightProxySchema>;
⋮----
export type AxiosProxy = z.infer<typeof AxiosProxySchema>;
⋮----
/**
 * Convert a proxy URL to an Axios proxy object
 * @param url - The proxy URL. Example: `http://user:pass@host:port`
 * @returns The Axios proxy object
 */
export function proxyUrlToAxiosProxy(url: string): AxiosProxy
⋮----
// Updated URL pattern to include authentication
⋮----
// Parse port, defaulting to 80 for http and 443 for https if not provided
⋮----
// console.log("proxy-utils.ts > proxyUrlToAxiosProxy() > proxyData :>>", proxyData);
⋮----
// Validate the proxy data
⋮----
/**
 * Convert a proxy URL to a Playwright proxy object
 * @param url - The proxy URL. Example: `http://user:pass@host:port`
 * @returns The Playwright proxy object
 */
export function proxyUrlToPlaywightProxy(url: string): PlaywightProxy
⋮----
const protocol = url.startsWith("https") ? "https" : "http"; // Determine protocol based on the input URL
⋮----
server: `${protocol}://${axiosProxy.host}:${axiosProxy.port}`, // Removed auth from server
⋮----
export async function testProxyConnection(
  proxyServer: string,
  username: string,
  password: string
): Promise<boolean>
⋮----
// console.log("proxy-utils.ts > testProxyConnection() > Starting proxy connection test");
⋮----
// Construct the proxy URL with authentication
⋮----
// Create a proxy agent
⋮----
// Make a test request
⋮----
timeout: 5000, // 5 second timeout
⋮----
// console.log("proxy-utils.ts > testProxyConnection() > Proxy connection successful");
</file>

<file path="src/lib/proxy/webshare-proxy.ts">
import axios from "axios";
⋮----
import { env } from "@/env";
⋮----
export type Proxy = {
  id: string;
  username: string;
  password: string;
  proxy_address: string;
  port: number;
  valid: boolean;
};
⋮----
export async function fetchWebshare()
⋮----
export async function initWebshareProxy()
</file>

<file path="src/lib/sitemap/submit-index.ts">
import axios from "axios";
⋮----
import { getGoogleAccessToken } from "../google/google-oauth2";
⋮----
export async function submitUrlToGoogleSearchIndex(url: string): Promise<boolean>
</file>

<file path="src/lib/sitemap/submit-sitemap.ts">
import axios from "axios";
⋮----
import { getGoogleAccessToken } from "../google/google-oauth2";
⋮----
export async function submitSitemapToGoogleSearchConsole(
  siteUrl: string,
  sitemapUrl: string
): Promise<void>
</file>

<file path="src/lib/tracking/index.ts">
const stringToArray = (str: string | undefined): Array<string> =>
⋮----
/**
 * Track page view of the website
 * @example
 * gaPage("/home", "Home page");
 */
⋮----
export const gaPage = (path: string, title: string = "Not specified") =>
⋮----
/**
 * Track event of the website
 * @example
 * gaEvent("interaction", "click", "View more");
 */
export const gaEvent = (category: string, action: string, label: string) =>
</file>

<file path="src/lib/translate/index.ts">

</file>

<file path="src/lib/translate/settings.ts">
export function getLanguageNameByCode(code: string): string | undefined
⋮----
export function getLanguageCodeByName(name: string): string | undefined
</file>

<file path="src/lib/translate/translate.ts">
import { type AskAiResponse, fetchAi } from "../ai";
⋮----
export type TranslateOptions = {
  model?: string;
  additionalPrompt?: string;
};
⋮----
export async function translate(content: string, toLang: string, options?: TranslateOptions)
⋮----
// model: options?.model || "google/gemini-flash-1.5",
// models: ["google/gemini-flash-1.5", "google/gemini-pro-1.5", "anthropic/claude-3-haiku"],
</file>

<file path="src/lib/upfile-best/get-upfile-key.ts">
import axios from "axios";
⋮----
import { env } from "@/env";
⋮----
export type UpfileKey = {
  key: string;
  mimetype: string;
};
⋮----
export async function getUpfileKey(mimetype: string): Promise<UpfileKey | null>
</file>

<file path="src/lib/upfile-best/index.ts">

</file>

<file path="src/lib/upfile-best/upload-file.ts">
import axios from "axios";
⋮----
import { bufferToBlob } from "../utils";
import { getUpfileKey } from "./get-upfile-key";
⋮----
export type UpfileResponse = {
  id: string;
  url: string;
  blurBase64: string;
  width: number;
  height: number;
};
⋮----
export async function uploadFileBest(buffer: Buffer)
</file>

<file path="src/lib/utils/mongodb/mongoObjectId.ts">
export default function mongoObjectId()
</file>

<file path="src/lib/utils/string/code-block.ts">
/**
 * Extract text between backticks
 * @param input
 * @returns
 */
export function extractTextBetweenBackticks(input: string)
⋮----
/**
 * Separate code blocks from AI messages
 */
export function splitCodeSnippets(input: string): string[]
⋮----
// The regex pattern captures both code blocks and texts around them.
⋮----
// Initialize an array to hold the parts of the string
⋮----
// Split the input text by the regex, keeping the code blocks in the result
⋮----
// Get the text before the current code block
⋮----
// Add the code block
⋮----
// Add any remaining text after the last code block
⋮----
// Filter out any empty strings that might be present
</file>

<file path="src/lib/utils/string/contain.ts">
/**
 * Check if input string has characters are not a letter, digit, underscore
 */
export function containsSpecialCharacters(str: string)
⋮----
export function contains(text: string, words: string[]): boolean
⋮----
export function filterSpecialChars(str: string)
⋮----
// Biểu thức chính quy để loại bỏ các ký tự không phải là chữ cái hoặc số
⋮----
export function containsChinese(str: string)
⋮----
export function containsEmoji(str: string)
</file>

<file path="src/lib/utils/string/count.ts">
export function countLeadingSigns(inputString: string, characterToCount: string): number
</file>

<file path="src/lib/utils/string/extract.ts">
export default function extractNameFromEmail(email: string): string
⋮----
// Split the email at the "@" symbol and take the first part
⋮----
// Replace dots, underscores, an‰d hyphens with spaces to normalize the name
</file>

<file path="src/lib/utils/string/format.ts">
export function ellipsis(str: string, length: number)
⋮----
export function formatBytes(bytes: number, decimals = 2)
⋮----
//
</file>

<file path="src/lib/utils/string/humanize.ts">
export type HumanizeNumberOptions = {
  /**
   * @example 1000 => 1,000
   * @default ","
   */
  delimiter?: string;
  /**
   * @example 1.1
   * @default "."
   */
  separator?: string;
};
⋮----
/**
   * @example 1000 => 1,000
   * @default ","
   */
⋮----
/**
   * @example 1.1
   * @default "."
   */
⋮----
export function humanizeNumber(n: number, options: HumanizeNumberOptions =
</file>

<file path="src/lib/utils/string/index.ts">

</file>

<file path="src/lib/utils/string/random.ts">
import bcrypt from "bcrypt";
⋮----
/**
 * Generates a random string of the specified length using only digits and alphabet characters.
 * @param length - The length of the random string to generate.
 * @returns A random string of the specified length.
 */
export function generateRandomString(length: number): string
⋮----
export async function generateRandomApiKey(): Promise<string>
</file>

<file path="src/lib/utils/string/slug.ts">
import { randomStringAndNumberByLength } from "diginext-utils/dist/string/random";
import isEmpty from "lodash/isEmpty";
⋮----
import { containsEmoji, filterSpecialChars } from "./contain";
import { containsChinese } from "./contain";
⋮----
export type MakeSlugOptions = {
  delimiter?: string;
  lowercase?: boolean;
  replacements?: { [key: string]: string };
  transliterate?: boolean;
  limit?: number;
};
⋮----
// Latin
⋮----
// Latin symbols
⋮----
// Greek
⋮----
// Turkish
⋮----
// Russian
⋮----
// Ukrainian
⋮----
// Czech
⋮----
// Polish
⋮----
// Latvian
⋮----
export const makeSlug = (input: string, opt: MakeSlugOptions =
⋮----
// convert any input type to string ;)
⋮----
// Merge options
⋮----
// Vietnamese
⋮----
// Make custom replacements
⋮----
// Transliterate characters to ASCII
⋮----
// Replace non-alphanumeric characters with our delimiter
⋮----
// Remove duplicate delimiters
⋮----
// Truncate slug to max. characters
⋮----
// Remove delimiter from ends
⋮----
/**
 * Create a unique slug by input string
 * @param prismaSchema Prisma schema
 * @param input Input string
 * @param opt Make slug options
 * @returns {string} Unique slug
 */
export async function makeUniqueSlug(
  prismaSchema: any,
  input: string,
  opt: MakeSlugOptions & { field: string; atempt: number } = { field: "slug", atempt: 0 }
)
⋮----
export function makeSlugByName(name: string)
</file>

<file path="src/lib/utils/ai-cost.ts">
import { toFloat } from "diginext-utils/dist/object";
⋮----
import { aiModels } from "../ai/models";
⋮----
export function calculateAiCost(model: string, prompt_tokens: number, completion_tokens: number)
⋮----
// get AI model
⋮----
// calculate and return
⋮----
export function calculateAiCostByUsage(
  model: string,
  usage: { prompt_tokens: number; completion_tokens: number }
)
</file>

<file path="src/lib/utils/array.ts">
export function sortToFirst(arr: any[], key: string, startWith: string)
⋮----
return -1; // a comes first
⋮----
return 1; // b comes first
⋮----
return 0; // no change in order
⋮----
export function unionArrays(duplicatedKey: string, ...arrays: any[][])
</file>

<file path="src/lib/utils/buffer.ts">
import axios from "axios";
import { toInt } from "diginext-utils/dist/object";
import { existsSync, mkdirSync, writeFileSync } from "fs";
import { dirname } from "path";
import { PassThrough } from "stream";
⋮----
/**
 * Read image url and convert to {Buffer}
 * @returns {Promise<Buffer | null>}
 */
export async function getBufferFromUrl(url: string)
⋮----
export async function getFileSizeFromUrl(url: string)
⋮----
/**
 * Read file url and convert to {ReadStream}
 */
⋮----
export async function getStreamFromUrl(url: string)
⋮----
throw error; // re-throw the error to propagate it
⋮----
/**
 * Download file from url and save to outputPath
 * @param url
 * @param outputPath - Include file name
 * @returns {Promise<string | null>}
 */
export async function downloadFile(url: string, outputPath: string)
⋮----
// split file name & create directory if not exists
</file>

<file path="src/lib/utils/country.ts">
export const getCountry = () =>
⋮----
export function getCountryNameByCode(code: string)
⋮----
export function getCountryNames(codes: string[])
⋮----
export function getCountryCodes(names: string[])
</file>

<file path="src/lib/utils/cssVar.ts">
export const cssVar = (name: string, value?: string) =>
</file>

<file path="src/lib/utils/date.ts">
import dayjs from "dayjs";
⋮----
export function getCurrentSystemDatetimeISOString()
⋮----
export function nowStr()
</file>

<file path="src/lib/utils/email.ts">
export const isValidEmail = (email: string) =>
</file>

<file path="src/lib/utils/image.ts">
import axios from "axios";
import { readFileSync, writeFileSync } from "fs";
import { Jimp } from "jimp";
import path from "path";
⋮----
export function readFileToBuffer(filePath: string)
⋮----
/**
 * Đọc URL hình ảnh và chuyển đổi thành {Buffer}
 * @returns {Promise<Buffer | null>}
 */
export async function getImageBufferFromUrl(url: string)
⋮----
/**
 * Tải hình ảnh từ URL và lưu vào đường dẫn đầu ra
 * @returns {Promise<string | null>}
 */
export async function downloadImage(url: string, outputPath: string): Promise<string | null>
⋮----
export async function resizeImageFromUrl(url: string, width: number, height?: number)
⋮----
// resize image using "Jimp"
⋮----
// return buffer
⋮----
export async function bufferToBase64(buffer: Buffer)
⋮----
export async function imageUrlToBase64(url: string)
⋮----
export async function resizeImageUrlToBase64(url: string, width: number, height?: number)
⋮----
export function saveBufferToFile(buffer: Buffer, filePath: string)
⋮----
export function bufferToBlob(buffer: Buffer)
⋮----
export async function getImageSizeByBuffer(buffer: Buffer)
⋮----
export async function getImageSizeByUrl(url: string)
</file>

<file path="src/lib/utils/index.ts">

</file>

<file path="src/lib/utils/os.ts">
export function getOS()
⋮----
export function isWin()
⋮----
export function isMac()
⋮----
export function isLinux()
</file>

<file path="src/lib/utils/price.ts">
import { toFloat } from "diginext-utils/dist/object";
⋮----
export function roundPrice(price: number | string)
⋮----
export function roundDecimal(num: number | string, maxDecimal = 2)
</file>

<file path="src/lib/utils/retry.ts">
export async function retry(promiseFactory: () => void | Promise<any>, retryCount: number)
</file>

<file path="src/lib/utils/time.ts">
import chalk from "chalk";
import dayjs from "dayjs";
import duration from "dayjs/plugin/duration";
import humanize from "humanize-duration";
⋮----
/**
 * Convert seconds to time format: "HH:mm:ss"
 * @param seconds - Input seconds
 */
export function secondsToTimeString(seconds: number)
⋮----
export function secondsToTimeFormat(seconds: number, format: "HH:mm:ss" | "mm:ss")
⋮----
export function logWithTime(...messages: string[])
⋮----
export class LogSession
⋮----
constructor(title = "LOG")
⋮----
log(...messages: string[])
⋮----
logWithTime(...messages: string[])
⋮----
end()
</file>

<file path="src/lib/utils/tz-names.ts">

</file>

<file path="src/lib/utils/upload.ts">
import { PutObjectCommand, S3Client } from "@aws-sdk/client-s3";
import { toBool } from "diginext-utils/dist/object";
import guessMimeTypeByBuffer from "diginext-utils/dist/string/guessMimeTypeByBuffer";
⋮----
export const isCdnStorageAvaiable = () =>
⋮----
const REGION = "auto"; // Cloudflare R2 doesn't require a region, but the SDK needs this parameter
⋮----
/**
 * Upload file to Cloudflare CDN.
 * @param fileContent
 * @param fileName
 * @returns
 */
export async function uploadFile(fileContent: Buffer, fileName: string)
</file>

<file path="src/lib/utils/wait.ts">
export async function wait(ms: number, callback?: () => void)
</file>

<file path="src/lib/validation/index.ts">
import validatePassword from "@/lib/validation/validatePassword";
import validateUsername from "@/lib/validation/validateUsername";
</file>

<file path="src/lib/validation/validatePassword.ts">
import { IsLocal } from "@/config";
⋮----
export default function validatePassword(password: any):
⋮----
// Consider using stronger criteria for password complexity in production
⋮----
// (?=.*[A-Z])
// (?=.*\W)
⋮----
// Additional password checks can be placed here (e.g., common passwords, patterns)
</file>

<file path="src/lib/validation/validateUsername.ts">
export default function validateUsername(username: any):
⋮----
// Additional username checks can be placed here (e.g., reserved names, patterns)
</file>

<file path="src/lib/youtube/types.ts">
export type HttpHeaders = {
  Accept: string;
  Referer: string;
  "User-Agent": string;
  "Sec-Fetch-Mode": string;
  "Accept-Language": string;
};
⋮----
export type AudioFormat = {
  abr: number | null;
  ext: string;
  tbr: number | null;
  url: string;
  vbr: number;
  format: string;
  vcodec: string;
  has_drm: boolean;
  quality: number;
  language: string;
  protocol: string;
  audio_ext: string;
  format_id: string;
  video_ext: string;
  preference: number | null;
  resolution: string;
  format_note: string;
  aspect_ratio: number | null;
  format_index: number | null;
  http_headers: HttpHeaders;
  manifest_url: string;
  source_preference: number;
};
⋮----
export type MergedFormat = {
  abr: number | null;
  asr: number;
  ext: string;
  fps: number;
  tbr: number;
  url: string;
  vbr: number | null;
  width: number;
  acodec: string;
  format: string;
  height: number;
  vcodec: string;
  has_drm: boolean;
  quality: number;
  filesize: number;
  language: string;
  protocol: string;
  audio_ext: string;
  format_id: string;
  video_ext: string;
  preference: number | null;
  resolution: string;
  format_note: string;
  aspect_ratio: number;
  http_headers: HttpHeaders;
  dynamic_range: string;
  audio_channels: number;
  filesize_approx: number;
  source_preference: number;
  downloader_options: {
    http_chunk_size: number;
  };
  language_preference: number;
};
⋮----
export type VideoFormat = {
  abr: number;
  ext: string;
  fps: number;
  tbr: number;
  url: string;
  vbr: number;
  width: number;
  acodec: string;
  format: string;
  height: number;
  vcodec: string;
  has_drm: boolean;
  quality: number;
  protocol: string;
  audio_ext: string;
  format_id: string;
  video_ext: string;
  preference: number | null;
  resolution: string;
  aspect_ratio: number;
  format_index: number | null;
  http_headers: HttpHeaders;
  manifest_url: string;
  dynamic_range: string;
  source_preference: number;
};
⋮----
export type Thumbnail = {
  id: string;
  url: string;
  preference: number;
};
⋮----
export type Version = {
  version: string;
  repository: string;
  current_git_head: null | string;
  release_git_head: string;
};
⋮----
export type CaptionFormat = {
  ext: string;
  url: string;
  name: string;
};
⋮----
export type LanguageCaptions = CaptionFormat[];
⋮----
export type AutomaticCaptions = Record<string, LanguageCaptions>;
⋮----
export type VideoInfo = {
  id: string;
  abr: number;
  asr: number;
  ext: string;
  fps: number;
  tbr: number;
  vbr: number;
  tags: string[];
  _type: string;
  epoch: number;
  title: string;
  width: number;
  acodec: string;
  audios: AudioFormat[];
  format: string;
  height: number;
  merged: MergedFormat[];
  vcodec: string;
  videos: VideoFormat[];
  channel: string;
  formats: any[]; // You might want to define a more specific type for formats if needed
  heatmap: null | any; // Define a more specific type if heatmap data structure is known
  is_live: boolean;
  _has_drm: null | boolean;
  _version: Version;
  chapters: null | any[]; // Define a more specific type if chapter structure is known
  duration: number;
  language: string;
  playlist: null | any; // Define a more specific type if playlist structure is known
  protocol: string;
  uploader: string;
  was_live: boolean;
  age_limit: number;
  extractor: string;
  format_id: string;
  fulltitle: string;
  subtitles: Record<string, any>; // Define a more specific type if subtitle structure is known
  thumbnail: string;
  categories: string[];
  channel_id: string;
  display_id: string;
  like_count: number;
  resolution: string;
  thumbnails: Thumbnail[];
  view_count: number;
  channel_url: string;
  description: string;
  format_note: string;
  live_status: string;
  upload_date: string;
  uploader_id: string;
  webpage_url: string;
  aspect_ratio: number;
  availability: string;
  original_url: string;
  release_year: null | number;
  uploader_url: string;
  comment_count: number;
  dynamic_range: string;
  extractor_key: string;
  audio_channels: number;
  average_rating: null | number;
  playlist_index: null | number;
  duration_string: string;
  filesize_approx: number;
  stretched_ratio: null | number;
  playable_in_embed: boolean;
  release_timestamp: null | number;
  requested_formats: any[]; // Define a more specific type if needed
  automatic_captions: AutomaticCaptions;
  webpage_url_domain: string;
  _format_sort_fields: string[];
  requested_downloads: any[]; // Define a more specific type if needed
  requested_subtitles: null | any; // Define a more specific type if needed
  webpage_url_basename: string;
  channel_follower_count: number;
};
⋮----
formats: any[]; // You might want to define a more specific type for formats if needed
heatmap: null | any; // Define a more specific type if heatmap data structure is known
⋮----
chapters: null | any[]; // Define a more specific type if chapter structure is known
⋮----
playlist: null | any; // Define a more specific type if playlist structure is known
⋮----
subtitles: Record<string, any>; // Define a more specific type if subtitle structure is known
⋮----
requested_formats: any[]; // Define a more specific type if needed
⋮----
requested_downloads: any[]; // Define a more specific type if needed
requested_subtitles: null | any; // Define a more specific type if needed
</file>

<file path="src/lib/youtube/youtube-caption-download.ts">
import { type VideoCaption, VideoProvider } from "@prisma/client";
import { randomInt } from "crypto";
⋮----
import { prisma } from "@/lib/db";
⋮----
import { wait } from "../utils";
import type { VideoInfo } from "./types";
import { type CaptionLocale, fetchTranscript, listCaptionLocales } from "./youtube-transcript";
⋮----
export default async function youtubeCaptionDownload(videoInfo: VideoInfo)
⋮----
// fetch transcript for each locale every 0.2 seconds after each other
⋮----
// check if transcript already exists
⋮----
// fetch transcript
⋮----
// save transcript
⋮----
// wait for a while before fetching the next caption (avoid 429 error)
</file>

<file path="src/lib/youtube/youtube-info.ts">
import { VideoProvider } from "@prisma/client";
import { $ } from "execa";
⋮----
import { env } from "@/env";
import { prisma } from "@/lib/db";
⋮----
import type { VideoInfo } from "./types";
⋮----
export default async function youtubeInfo(url: string)
⋮----
// Prepare arguments for yt-dlp
⋮----
// crawl data
⋮----
// video info
⋮----
// save to database
</file>

<file path="src/lib/youtube/youtube-save.ts">
import type { VideoInfo } from "./types";
import youtubeCaptionDownload from "./youtube-caption-download";
import youtubeInfo from "./youtube-info";
⋮----
export default async function youtubeSave(url: string)
⋮----
// video info
⋮----
// save all automatic_captions
</file>

<file path="src/lib/youtube/youtube-summary.ts">
import { VideoProvider } from "@prisma/client";
import { randomUUID } from "crypto";
⋮----
import { env } from "@/env";
import { prisma } from "@/lib/db";
⋮----
import type { SummarizeOptions } from "../ai/summarize";
import { summarizeYoutubeTranscript } from "../ai/summarize";
import { summaryPartition } from "../ai/summary-partition";
import { uploadFileBuffer } from "../cloud-storage";
import { screenshot } from "../playwright/screenshot";
import { getYoutubeTranscript } from "./youtube-transcript";
⋮----
export function getYoutubeVideoUrl(videoId: string): string
⋮----
export function getVideoIdFromYoutubeUrl(url: string): string
⋮----
// Extract the video ID from the URL
// console.log('url :>> ', url);
⋮----
// If the URL contains additional parameters, remove them
⋮----
export async function youtubeSummarize(urlOrID: string, options?: SummarizeOptions)
⋮----
// save to database
</file>

<file path="src/lib/youtube/youtube-to-article.ts">
import { type AskAiResponse } from "../ai";
import { fetchAi } from "../ai/fetch-ai";
import { usagePurposes } from "../ai/summarize";
import { getLanguageCodeByName, languages } from "../translate/settings";
import { getYoutubeVideoUrl } from "./youtube-summary";
import { getYoutubeTranscript } from "./youtube-transcript";
⋮----
export type TranscriptToArticleOptions = {
  /**
   * AI Model in string.
   * @example "mistralai/mixtral-8x7b-instruct:nitro"
   */
  model?: string;
  length?: string | number;
  purpose?: string;
  toLanguage?: string | null;
  additionalPrompt?: string;
};
⋮----
/**
   * AI Model in string.
   * @example "mistralai/mixtral-8x7b-instruct:nitro"
   */
⋮----
export async function aiYoutubeToArticle(content: string, options: TranscriptToArticleOptions)
⋮----
// model: options?.model || "google/gemini-flash-1.5",
// models: ["google/gemini-flash-1.5", "google/gemini-pro-1.5", "anthropic/claude-3-haiku"],
⋮----
export async function youtubeToArticle(urlOrID: string, options?: TranscriptToArticleOptions)
</file>

<file path="src/lib/youtube/youtube-transcript-playwright.ts">
import { toFloat } from "diginext-utils/dist/object";
import _ from "lodash";
import { parse } from "node-html-parser";
import { chromium } from "playwright";
⋮----
import { fetchWebshare } from "../proxy/webshare-proxy";
import { secondsToTimeString } from "../utils/time";
⋮----
export type TranscriptTextItem = {
  startSec: number;
  endSec: number;
  startTime: string;
  endTime: string;
  duration: number;
  text: string;
};
⋮----
export async function fetchTranscriptPlaywright(
  videoId: string,
  config: { lang?: string | null; output?: "string" | "array" | "object" } = {}
)
⋮----
// proxy
⋮----
// create new context
⋮----
// add init script
⋮----
// set default cookie
// if (Config.PLAYWRIGHT_COOKIES) context.addCookies(Config.PLAYWRIGHT_COOKIES);
⋮----
// new page
⋮----
// max timeout: 120 seconds
⋮----
// go to url
⋮----
// Wait for load state
⋮----
// Wait for the page to load completely
⋮----
// console.log('dataString :>> ', dataString);
⋮----
// extract transcript url
⋮----
// close page & browser
⋮----
// fetch & parse captions
⋮----
// select lang
⋮----
// scripts.push(`[At ${startSec}s] ${chunk.textContent}`);
</file>

<file path="src/lib/youtube/youtube-transcript.ts">
import { VideoProvider } from "@prisma/client";
import axios from "axios";
import { randomInt } from "crypto";
import { HttpsProxyAgent } from "https-proxy-agent";
import keys from "lodash/keys";
⋮----
import { env } from "@/env";
import { prisma } from "@/lib/db";
⋮----
import { wait } from "../utils";
import type { VideoInfo } from "./types";
import youtubeInfo from "./youtube-info";
import { getVideoIdFromYoutubeUrl } from "./youtube-summary";
⋮----
export type TranscriptOptions = {
  locale?: string;
  /**
   * - `json3`: JSON formatted transcript
   * - `srv1`: XML formatted split by sentences
   *   ```xml
   *   <transcript>
   *     <text start="0.04" dur="3.359">hello world</text>
   *     <text start="3.36" dur="1.234">this is a test</text>
   *   </transcript>
   *   ```
   * - `srv2`: XML formatted split by words
   *   ```xml
   *   <timedtext>
   *     <window id="1" t="0" op="define" ap="6" ah="20" av="100" rc="2" cc="40" sd="1" ju="0"/>
   *     <text t="40" d="3359" w="1" r="15" c="1">hello</text>
   *     <text t="40" d="3359" w="1" r="15" c="1">world</text>
   *   </timedtext>
   *   ```
   * - `srv3`: XML formatted group by sentences & words
   *   ```xml
   *   <timedtext>
   *     <head>
   *       <ws id="0"/>
   *       <ws id="1" mh="2" ju="0" sd="3"/>
   *       <wp id="0"/>
   *       <wp id="1" ap="6" ah="20" av="100" rc="2" cc="40"/>
   *     </head>
   *     <body>
   *       <w t="0" id="1" wp="1" ws="1"/>
   *       <p t="40" d="3359" w="1">
   *         <s ac="0">caalatal </s>
   *         <s t="426" ac="0">atu </s>
   *         <s t="852" ac="0">dacrise </s>
   *         <s t="1278" ac="0">waytek</s>
   *       </p>
   *       <p t="1470" d="1929" w="1" a="1"> </p>
   *     </body>
   *   </timedtext>
   *   ```
   * - `ttml`: XML formatted with styles
   *   ```xml
   *   <tt xml:lang="en" xmlns="http://www.w3.org/ns/ttml" xmlns:tts="http://www.w3.org/ns/ttml#tts">
   *     <head>
   *       <styling>
   *         <style xml:id="s1" tts:textAlign="center" tts:extent="90% 90%" tts:origin="5% 5%" tts:displayAlign="after"/>
   *         <style xml:id="s2" tts:fontSize=".72c" tts:backgroundColor="black" tts:color="white"/>
   *       </styling>
   *       <layout>
   *         <region xml:id="r1" style="s1"/>
   *       </layout>
   *     </head>
   *     <body region="r1">
   *       <div>
   *         <p begin="00:00:00.040" end="00:00:03.399" style="s2">caalatal atu dacrise waytek</p>
   *         <p begin="00:00:01.480" end="00:00:06.000" style="s2">gacsa 19 duyyek tiyak teyni xamcin qusba</p>
   *         <p begin="00:00:03.399" end="00:00:08.679" style="s2">weeloola edde anuk ta ammunti</p>
   *         ...
   *       </p>
   *     </body>
   *   </tt>
   *   ```
   * - `vtt`: Plain text transcript
   * @default "ttml"
   */
  ext?: "json3" | "srv1" | "srv2" | "srv3" | "ttml" | "vtt";
};
⋮----
/**
   * - `json3`: JSON formatted transcript
   * - `srv1`: XML formatted split by sentences
   *   ```xml
   *   <transcript>
   *     <text start="0.04" dur="3.359">hello world</text>
   *     <text start="3.36" dur="1.234">this is a test</text>
   *   </transcript>
   *   ```
   * - `srv2`: XML formatted split by words
   *   ```xml
   *   <timedtext>
   *     <window id="1" t="0" op="define" ap="6" ah="20" av="100" rc="2" cc="40" sd="1" ju="0"/>
   *     <text t="40" d="3359" w="1" r="15" c="1">hello</text>
   *     <text t="40" d="3359" w="1" r="15" c="1">world</text>
   *   </timedtext>
   *   ```
   * - `srv3`: XML formatted group by sentences & words
   *   ```xml
   *   <timedtext>
   *     <head>
   *       <ws id="0"/>
   *       <ws id="1" mh="2" ju="0" sd="3"/>
   *       <wp id="0"/>
   *       <wp id="1" ap="6" ah="20" av="100" rc="2" cc="40"/>
   *     </head>
   *     <body>
   *       <w t="0" id="1" wp="1" ws="1"/>
   *       <p t="40" d="3359" w="1">
   *         <s ac="0">caalatal </s>
   *         <s t="426" ac="0">atu </s>
   *         <s t="852" ac="0">dacrise </s>
   *         <s t="1278" ac="0">waytek</s>
   *       </p>
   *       <p t="1470" d="1929" w="1" a="1"> </p>
   *     </body>
   *   </timedtext>
   *   ```
   * - `ttml`: XML formatted with styles
   *   ```xml
   *   <tt xml:lang="en" xmlns="http://www.w3.org/ns/ttml" xmlns:tts="http://www.w3.org/ns/ttml#tts">
   *     <head>
   *       <styling>
   *         <style xml:id="s1" tts:textAlign="center" tts:extent="90% 90%" tts:origin="5% 5%" tts:displayAlign="after"/>
   *         <style xml:id="s2" tts:fontSize=".72c" tts:backgroundColor="black" tts:color="white"/>
   *       </styling>
   *       <layout>
   *         <region xml:id="r1" style="s1"/>
   *       </layout>
   *     </head>
   *     <body region="r1">
   *       <div>
   *         <p begin="00:00:00.040" end="00:00:03.399" style="s2">caalatal atu dacrise waytek</p>
   *         <p begin="00:00:01.480" end="00:00:06.000" style="s2">gacsa 19 duyyek tiyak teyni xamcin qusba</p>
   *         <p begin="00:00:03.399" end="00:00:08.679" style="s2">weeloola edde anuk ta ammunti</p>
   *         ...
   *       </p>
   *     </body>
   *   </tt>
   *   ```
   * - `vtt`: Plain text transcript
   * @default "ttml"
   */
⋮----
export type CaptionLocale = {
  ext: string;
  url: string;
  name: string;
};
⋮----
type CaptionLocaleOptions = {
  locale?: string;
  ext?: "json3" | "srv1" | "srv2" | "srv3" | "ttml" | "vtt";
};
⋮----
export function listCaptionLocales(
  videoInfo: VideoInfo,
  options: Omit<CaptionLocaleOptions, "ext">
): (Omit<CaptionLocale, "name"> &
⋮----
// get the caption locales for the given locale
⋮----
// get the default locales
⋮----
export function getCaptionLocale(
  videoInfo: VideoInfo,
  options: CaptionLocaleOptions
): CaptionLocale | null
⋮----
// get the caption locales for the given locale
⋮----
// if no caption locale found, return the first one
⋮----
export type FetchTranscriptOptions = {
  proxy?: boolean;
};
⋮----
export async function fetchTranscript(
  captionLocale: CaptionLocale,
  options?: FetchTranscriptOptions
): Promise<string | null>
⋮----
// if the error is a 429 (too many requests), wait for a random time and try again
⋮----
export async function getYoutubeTranscript(url: string, options?: TranscriptOptions)
⋮----
// if this video was already saved, return the cached caption
⋮----
// if not cached, fetch the video info and download the caption
⋮----
// save the caption to the database
</file>

<file path="src/lib/auth.ts">
import { PrismaAdapter } from "@lucia-auth/adapter-prisma";
import { GitHub, Google } from "arctic";
import dotenv from "dotenv";
import type { RequestHandler } from "express";
import { Lucia, verifyRequestOrigin } from "lucia";
⋮----
import { env } from "@/env";
⋮----
import { prisma } from "./db";
⋮----
// console.log("GITHUB_CLIENT_ID", process.env["GITHUB_CLIENT_ID"]);
// console.log("GITHUB_CLIENT_SECRET", process.env["GITHUB_CLIENT_SECRET"]);
⋮----
// this sets cookies with super long expiration
⋮----
// set to `true` when using HTTPS
⋮----
// attributes has the type of DatabaseUserAttributes
⋮----
// eslint-disable-next-line no-unused-vars
interface Register {
    Lucia: typeof Lucia;
    DatabaseUserAttributes: DatabaseUserAttributes;
  }
⋮----
interface DatabaseUserAttributes {
  email: string;
}
⋮----
export const verifyRequest: RequestHandler = (req, res, next) =>
⋮----
export const validateSession: RequestHandler = async (req, res, next) =>
</file>

<file path="src/lib/redis.ts">
import Redis from "ioredis";
⋮----
import { env } from "@/env";
⋮----
// Redis client (Publisher)
⋮----
// Redis client (Subscriber)
⋮----
const retryStrategy = (times: number) =>
⋮----
/**
 * Initialize Redis function
 */
export const initRedis = () =>
⋮----
// Create a new client for publisher
⋮----
// Create a duplicate client for subscriber
// redisSubscriber = redis.duplicate();
// redisSubscriber.options.name = "subscriber";
// redisSubscriber.options.retryStrategy = retryStrategy;
// redisSubscriber.subscribe();
⋮----
// Set the key prefix
⋮----
// Handle Redis connection success
⋮----
// Handle Redis disconnect
⋮----
// Handle Redis connection errors
⋮----
// Add to cache
export const addToCache = async (key: string, value: string, ttl?: number) =>
⋮----
// Get from cache
export const getFromCache = async (key: string) =>
⋮----
// Clear cache
export const clearCache = async (key: string) =>
⋮----
// Publish message
export const publishMessage = async (roomId: string, message: string) =>
⋮----
// Subscribe to room
// eslint-disable-next-line no-unused-vars
export const subscribeToRoom = (roomId: string, callback: (message: string) => void) =>
⋮----
// Save message
export const saveMessage = async (roomId: string, message: string) =>
⋮----
// Get chat history
export const getChatHistory = async (roomId: string, limit = 50) =>
⋮----
// Add user to room
export const addUserToRoom = async (roomId: string, userId: string) =>
⋮----
// Get users in room
export const getUsersInRoom = async (roomId: string) =>
</file>

<file path="src/middlewares/api_key_auth.ts">
import type { RequestHandler } from "express";
⋮----
import { prisma } from "@/lib/db";
⋮----
export const apiKeyAuth: RequestHandler = async (req, res, next) =>
⋮----
// Check if there's already a logged-in user
⋮----
// validate api key
⋮----
// Check if there's already a logged-in user
⋮----
// assign api key to locals
⋮----
// Only set user if it's not already set
</file>

<file path="src/middlewares/check-plan-limits.ts">
import dayjs from "dayjs";
import type { NextFunction, Request, Response } from "express";
import { z } from "zod";
⋮----
import { redis } from "@/lib/redis";
import { getUserPlanLimits } from "@/modules/payment/manage-plans";
import { respondFailure } from "@/modules/response/respond-helper";
⋮----
// Zod schema for request validation
⋮----
/**
 * Get Redis key for rate limiting
 */
const getRedisKeys = (userId: string) =>
⋮----
/**
 * Middleware to check user plan request limits
 */
export const checkPlanLimits = async (_req: Request, res: Response, next: NextFunction) =>
⋮----
// Validate request
⋮----
// Get user plan limits
⋮----
// Check requests per minute (sliding window)
⋮----
// Set expiry for minute window (1 minute)
⋮----
// Check requests per month
const currentMonth = dayjs().format("YYYY-MM"); // YYYY-MM
⋮----
// Set expiry for month window (31 days to be safe)
⋮----
// All checks passed
</file>

<file path="src/middlewares/csrf.ts">
import { doubleCsrf } from "csrf-csrf";
import type express from "express";
⋮----
import { env } from "@/env";
⋮----
getSecret: () => env.APP_SECRET, // Bạn cần định nghĩa secret này trong config
⋮----
// Tạo một wrapper function để xử lý trường hợp không có cookie
const safeGenerateToken = (req: express.Request, res: express.Response) =>
</file>

<file path="src/modules/analytics/getAnalytics.ts">
import dayjs from "dayjs";
⋮----
import { prisma } from "@/lib/db";
⋮----
export const getAnalytics = async (linkId: string) =>
⋮----
// Get click counts for the specific link
⋮----
// Get QR scan counts for the specific link
⋮----
// Create maps for quick access
⋮----
// console.log("getAnalytics > formattedLink :>>", formattedLink);
</file>

<file path="src/modules/analytics/getBrowsers.ts">
import dayjs from "dayjs";
⋮----
import { getCachedData, setCachedData } from "@/lib/cache"; // Import cache functions
import { prisma } from "@/lib/db";
⋮----
export const getBrowsers = async (
  linkId: string,
  options: { startDate?: string; endDate?: string; page?: string; limit?: string }
) =>
⋮----
// Check cache first
⋮----
// Set cache
</file>

<file path="src/modules/analytics/getClicks.ts">
import dayjs from "dayjs";
import { z } from "zod";
⋮----
import { getCachedData, setCachedData } from "@/lib/cache";
import { prisma } from "@/lib/db";
⋮----
export const getClicks = async (
  linkId: string,
  options: { startDate?: string; endDate?: string; page?: string; limit?: string }
) =>
⋮----
// Check cache first
⋮----
// format data
⋮----
// Cache results for 5 minutes
⋮----
// Validation schema
⋮----
export async function countClicksByDates(linkId: string, startDate: string, endDate: string)
⋮----
// Validate input dates
⋮----
// Check cache first
⋮----
// Parse dates
⋮----
// Validate date range
⋮----
// console.log("clickCounts :>>", clickCounts);
⋮----
// Create a date range array
⋮----
// Updated aggregation logic
⋮----
// Convert aggregated counts to an array
⋮----
// Cache results for 5 minutes
</file>

<file path="src/modules/analytics/getCountries.ts">
import dayjs from "dayjs";
⋮----
import { getCachedData, setCachedData } from "@/lib/cache";
import { prisma } from "@/lib/db";
⋮----
export const getCountries = async (
  linkId: string,
  options: { startDate?: string; endDate?: string; page?: string; limit?: string }
) =>
⋮----
// Check cache first
⋮----
// Set cache
</file>

<file path="src/modules/analytics/getDevices.ts">
import dayjs from "dayjs";
⋮----
import { getCachedData, setCachedData } from "@/lib/cache"; // Import cache functions
import { prisma } from "@/lib/db";
⋮----
export const getDevices = async (
  linkId: string,
  options: { startDate?: string; endDate?: string; page?: string; limit?: string }
) =>
⋮----
// Check cache first
⋮----
// Set cache
</file>

<file path="src/modules/analytics/getOs.ts">
import dayjs from "dayjs";
⋮----
import { getCachedData, setCachedData } from "@/lib/cache"; // Import cache functions
import { prisma } from "@/lib/db";
⋮----
export const getOs = async (
  linkId: string,
  options: { startDate?: string; endDate?: string; page?: string; limit?: string }
) =>
⋮----
// Check cache first
⋮----
// Set cache
</file>

<file path="src/modules/analytics/getQrScans.ts">
import dayjs from "dayjs";
import { z } from "zod";
⋮----
import { getCachedData, setCachedData } from "@/lib/cache";
import { prisma } from "@/lib/db";
⋮----
export const getQrScans = async (
  linkId: string,
  options: { startDate?: string; endDate?: string; page?: string; limit?: string }
) =>
⋮----
// Generate cache key based on parameters
⋮----
// Try to get data from cache first
⋮----
// Cache the result for 5 minutes
⋮----
// Validation schema
⋮----
export async function countQrScansByDates(linkId: string, startDate: string, endDate: string)
⋮----
// console.log("getQrScans.ts > countQrScansByDates() > params :>>", { linkId, startDate, endDate });
⋮----
// Validate input dates
⋮----
// Check cache first
⋮----
// console.log("getQrScans.ts > countQrScansByDates() > Serving from cache");
⋮----
// Validate link and QR code with timeout
⋮----
// Parse dates
⋮----
// Validate date range
⋮----
// Fetch scans with timeout
⋮----
// Process results
⋮----
// Pre-fill all dates with 0 counts
⋮----
// Validate scans type
⋮----
createdAt: z.string(), // Assuming createdAt is a string, adjust if necessary
⋮----
// Count actual scans
⋮----
// Convert map to sorted array
⋮----
// console.log("getQrScans.ts > countQrScansByDates() > result length :>>", formattedList.length);
⋮----
// Cache results
</file>

<file path="src/modules/analytics/getReferrers.ts">
import dayjs from "dayjs";
⋮----
import { getCachedData, setCachedData } from "@/lib/cache";
import { prisma } from "@/lib/db";
⋮----
export const getReferrers = async (
  linkId: string,
  options: { startDate?: string; endDate?: string; page?: string; limit?: string }
) =>
⋮----
// Generate cache key based on parameters
⋮----
// Try to get data from cache first
⋮----
// Cache the result for 5 minutes
</file>

<file path="src/modules/analytics/index.ts">

</file>

<file path="src/modules/databases/index.ts">

</file>

<file path="src/modules/databases/postgres.ts">
import { $ } from "execa";
import fs from "fs";
import path from "path";
⋮----
import { type ICloudStorage, uploadFileBuffer } from "@/lib/cloud-storage";
⋮----
interface BackupOptions {
  /**
   * The connection URL for the PostgreSQL database.
   */
  connectionUrl: string;

  /**
   * The name of the output file for the backup.
   */
  outputName: string;

  /**
   * Whether to print debug messages.
   */
  debug?: boolean;
}
⋮----
/**
   * The connection URL for the PostgreSQL database.
   */
⋮----
/**
   * The name of the output file for the backup.
   */
⋮----
/**
   * Whether to print debug messages.
   */
⋮----
/**
 * Find pg_dump in the system PATH
 */
async function findPgDump(): Promise<string>
⋮----
/**
 * Backup a PostgreSQL database using pg_dump with plain text format.
 *
 * @param {BackupOptions} options - The options for the backup operation.
 */
export async function backupPostgresDatabase({
  connectionUrl,
  outputName,
  debug = false,
}: BackupOptions): Promise<string>
⋮----
// Ensure outputName ends with .sql and remove any path separators
⋮----
// Ensure the uploads directory exists
⋮----
// Find pg_dump in system PATH
⋮----
// Use pg_dump with plain text format for SQL output
⋮----
export type StorageUploadOptions = {
  storage: ICloudStorage;
  debug?: boolean;
};
⋮----
export type BackupAndUploadOptions = BackupOptions & StorageUploadOptions;
⋮----
export async function backupAndUploadDatabase({
  connectionUrl,
  outputName,
  storage,
  debug = false,
}: BackupAndUploadOptions): Promise<
⋮----
// Create backup
⋮----
// Upload to cloud storage
⋮----
// Clean up local backup file
⋮----
// await fs.promises.unlink(outputPath);
</file>

<file path="src/modules/databases/utils.ts">
import dayjs from "dayjs";
import slugify from "slugify";
⋮----
/**
 * Extract database name from connection URL
 */
export function getDatabaseNameFromUrl(url: string): string
⋮----
/**
 * Generate a backup name if not provided
 */
export function generateBackupName(connectionUrl: string): string
</file>

<file path="src/modules/metadata/index.ts">

</file>

<file path="src/modules/metadata/metadata-crud.ts">
import { prisma } from "@/lib/db";
⋮----
import { scrapeMetadata } from "./metadata-scrape";
⋮----
export async function createLinkMetadata(inputUrl: string)
⋮----
// add main image to images
⋮----
// all data
</file>

<file path="src/modules/metadata/metadata-scrape.ts">
import axios from "axios";
import { JSDOM } from "jsdom";
⋮----
export async function scrapeMetadata(inputUrl: string)
⋮----
// og
⋮----
// twitter
⋮----
// facebook
⋮----
// twitter
</file>

<file path="src/modules/payment/index.ts">

</file>

<file path="src/modules/payment/manage-plans.ts">
import type { Prisma } from "@prisma/client";
import { PlanStatus, PlanType, UserPlanRecurring, UserPlanStatus } from "@prisma/client";
⋮----
import { env } from "@/env";
import { prisma } from "@/lib/db";
import { cancelPolarSubscription, initPolar } from "@/lib/payment/polar";
import { makeSlug } from "@/lib/utils";
⋮----
/**
 * Create initial plans in database
 * @returns
 */
export async function createInitialPlans()
⋮----
// Only initialize if not already initialized
⋮----
// console.log(`Create initial plans...`);
⋮----
// Try to get products from Polar with retries
⋮----
// console.log(`[${retries}] Fetching products from Polar...`);
⋮----
await new Promise((resolve) => setTimeout(resolve, 2000)); // Wait 2 seconds before retry
⋮----
// console.log(
//   `POLAR Products:`,
//   result.items.map((item) => item.name)
// );
⋮----
// create plans in database (if not exists)
⋮----
// Extract prices based on product's recurring status and price amount type
⋮----
// Get the first valid price ID and amount
⋮----
// upsert plans into database to avoid duplicates
⋮----
// Don't exit process, just log the error
⋮----
export async function getAvailablePricingPlans()
⋮----
/**
 * Create initial user plan for user
 * @param userId
 * @returns
 */
export async function createInitialUserPlan(userId: string)
⋮----
// get initial plan
⋮----
// console.log(`[createInitialUserPlan] initialUserPlan :>>`, initialUserPlan);
⋮----
// check if this user doesn't have any plan
// name should be one of the initial plans: "Pay As You Go", "Starter", "Amplifier", "Dominance
⋮----
// console.log(`[createInitialUserPlan] existingUserPlan :>>`, existingUserPlan);
⋮----
// create user plan
⋮----
// OFFER: add $5 to the balance for free trial (will remove in the future)
// addCreditsToUserBalance(userId, 5);
⋮----
export async function syncUserPlans()
⋮----
export async function getUserPlanLimits(userId: string)
⋮----
// get all active user plans
⋮----
// max user requests per minute
⋮----
// max user requests per month
⋮----
export async function cancelUserPlanByPolarSubscriptionId(polarSubscriptionId: string)
⋮----
// update user plan in database
⋮----
export async function cancelAllUserPlansByPolarSubscriptionIds(polarSubscriptionIds: string[])
⋮----
export async function cancelUserPlanById(userPlanId: string)
⋮----
// update user plan in database
⋮----
export async function cancelAllPolarSubscriptions(userId: string)
⋮----
export async function createUserPlan(
  userId: string,
  polarProductId: string,
  polarSubscriptionId: string
)
⋮----
// find the plan
⋮----
// deactivate previous plan (on polar and in database)
⋮----
// Plan: { type: { in: [PlanType.FREE, PlanType.MONTHLY, PlanType.ONE_TIME] } },
⋮----
// create user plan
⋮----
// notify new user plan created
// notifyNewUserPlanCreated(newUserPlan).catch((error) => {
//   console.error(`[createUserPlan] notifyNewUserPlanCreated error :>>`, error);
// });
⋮----
export async function getUserPlanByUserId(userId: string)
⋮----
// if user doesn't have any plan, create one
⋮----
export async function allUserPlansByUserId(userId: string)
⋮----
export async function allActiveUserPlansByUserId(userId: string)
⋮----
export async function allRecurringUserPlansByUserId(userId: string)
⋮----
export async function allOneTimeUserPlansByUserId(userId: string)
⋮----
export async function cancelUserPlan(userPlanId: string, options?:
⋮----
// cancel user plan in Polar
⋮----
// update user plan in database
</file>

<file path="src/modules/plan/cancel.ts">
import { prisma } from "@/lib/db";
⋮----
import { subscribe } from "./subscribe";
⋮----
export async function cancel(userPlanId: string)
⋮----
// subscribe to free plan
</file>

<file path="src/modules/plan/index.ts">

</file>

<file path="src/modules/plan/subscribe.ts">
import { prisma } from "@/lib/db";
⋮----
export async function subscribe(userId: string, planId: string)
⋮----
// if current plan is the same as the new plan, do nothing
⋮----
// deactivate current plan
⋮----
// create new user plan
</file>

<file path="src/modules/response/api-response.ts">
import { z } from "zod";
⋮----
export type ApiResponse = z.infer<typeof ApiResponseSchema>;
</file>

<file path="src/modules/response/index.ts">
import { getFailedResponse, getSuccessResponse } from "diginext-utils/dist/response";
⋮----
export const success = (data?: any) =>
⋮----
export const responseRedirect = (location = "/") =>
⋮----
export const fail404 = () =>
⋮----
export const fail400 = (message = "Something went wrong") =>
⋮----
export const fail401 = (message = "Unauthorized") =>
⋮----
export const fail403 = (message = "Unauthorized") =>
⋮----
export const fail500 = (message = "Something went wrong") =>
</file>

<file path="src/modules/response/respond-helper.ts">
import _ from "lodash";
import { z } from "zod";
⋮----
export interface ResponseData<T = any> {
  /**
   * 1 = succeed | 0 = failed
   */
  status: 1 | 0;
  data: T;
  /**
   * Error/warning messages
   */
  messages: string[];
}
⋮----
/**
   * 1 = succeed | 0 = failed
   */
⋮----
/**
   * Error/warning messages
   */
⋮----
export const respondFailure = <T = any>(params:
⋮----
export const respondSuccess = <T = any>(params:
⋮----
export type ApiResponse = z.infer<typeof zodApiResponse>;
</file>

<file path="src/modules/review/index.ts">

</file>

<file path="src/modules/review/review-crud.ts">
import { type Prisma, ReviewStatus } from "@prisma/client";
import { z } from "zod";
⋮----
import { TextModelSchema, VisionModelSchema } from "@/lib/ai";
import { prisma } from "@/lib/db";
⋮----
export type ReviewCreateData = z.infer<typeof ReviewCreateDataSchema>;
⋮----
export async function createReview(input: ReviewCreateData)
⋮----
// Set default models if not provided
⋮----
export async function updateReview(
  id: string,
  data: Partial<ReviewCreateData>,
  options?: { include?: Prisma.ReviewInclude }
)
⋮----
deleteMany: {}, // Remove existing categories
⋮----
export async function deleteReview(id: string)
⋮----
categories: true, // Ensure related categories are also cleaned up
⋮----
export async function getReviewById(
  reviewId: string,
  userId: string,
  options?: { include?: Prisma.ReviewInclude }
)
⋮----
export async function getUserReviews(userId: string, page: number = 1, limit: number = 10)
</file>

<file path="src/modules/review/review-start.ts">
import { ReviewStatus } from "@prisma/client";
import dayjs from "dayjs";
import { z } from "zod";
⋮----
import { IsDev } from "@/config";
import { TextModelSchema, VisionModelSchema } from "@/lib/ai";
import { analyzeImageBase64 } from "@/lib/ai/analyze-image";
import { analyzeUrl } from "@/lib/ai/analyze-url";
import { getHtmlContent } from "@/lib/playwright/get-html";
import { getAllImages } from "@/lib/playwright/get-images";
import { imageUrlToBase64 } from "@/lib/utils";
import { scrapeMetadata } from "@/modules/metadata/metadata-scrape";
⋮----
import type { ReviewCreateData } from "./review-crud";
import { createReview, updateReview } from "./review-crud";
import { reviewUrlByCaptureWebUrl } from "./review-url-by-screenshot";
⋮----
// Image extraction options
⋮----
// Link extraction options
⋮----
// AI model selection
⋮----
// Additional configuration options
⋮----
// Error handling
⋮----
export type ReviewStartOptions = z.infer<typeof ReviewStartOptionsSchema>;
⋮----
export async function startReview(input: ReviewCreateData, options?: ReviewStartOptions)
⋮----
// Validate input using Zod
⋮----
// Validate input data
⋮----
// Validate options if provided
⋮----
// Assign default options if not provided
⋮----
// Log start time
⋮----
// 2. Get images (max 50 or configured)
⋮----
// 3. Get links (max 50 or configured)
⋮----
// 4. Scrape metadata
⋮----
// 6. Run AI analysis on HTML content
⋮----
// 7. Run AI analysis on screenshot
⋮----
// 8. Run AI analysis on images
⋮----
// 9. Run AI analysis on links
⋮----
// 10. Update & save review
⋮----
// 11. Return review
⋮----
// Handle any errors during the review process
⋮----
// Update review with error status
⋮----
// Robust link extraction with multiple strategies and filtering options
async function extractLinks(
  url: string,
  options?: {
    type?: "web" | "image" | "file" | "all";
    maxLinks?: number;
  }
): Promise<string[]>
⋮----
// More comprehensive link extraction strategies
⋮----
// Standard http/https URLs
⋮----
// URLs with additional characters like parentheses or brackets
⋮----
// Capture links within href attributes
⋮----
// Capture links within src attributes
⋮----
// Apply multiple regex strategies
⋮----
// Clean and validate URLs
⋮----
.replace(/^href=["']|["']$/g, "") // Remove href/src attribute wrappers
⋮----
// Validate URL and ensure it's not a relative path
⋮----
// Only add absolute URLs from the same domain or external domains
⋮----
// Ignore invalid URLs
⋮----
// Filter links based on type option
⋮----
// Default to all if no type specified
⋮----
// Exclude common non-content links
⋮----
// Check link type
</file>

<file path="src/modules/review/review-url-by-screenshot.ts">
import dayjs from "dayjs";
⋮----
import { IsDev } from "@/config";
import type { VisionModel } from "@/lib/ai";
import { analyzeImageBase64 } from "@/lib/ai/analyze-image";
import { uploadFileBuffer } from "@/lib/cloud-storage";
import { screenshot } from "@/lib/playwright";
import { bufferToBase64 } from "@/lib/utils";
⋮----
import { createScreenshot } from "../screenshot/screenshot-crud";
⋮----
export async function reviewUrlByCaptureWebUrl(
  params: { url: string; reviewId?: string },
  options?: {
    debug?: boolean;
    /**
     * @default "google/gemini-flash-1.5-8b"
     */
    model?: VisionModel;
    /**
     * @default 3000
     */
    delayAfterLoad?: number;
    /**
     * Timeout in milliseconds
     * @default 60_000
     */
    timeout?: number;
  }
)
⋮----
/**
     * @default "google/gemini-flash-1.5-8b"
     */
⋮----
/**
     * @default 3000
     */
⋮----
/**
     * Timeout in milliseconds
     * @default 60_000
     */
⋮----
// 1. Take screenshot
⋮----
// if (options?.debug) console.log("reviewUrlByCaptureWebUrl() > base64 :>> ", base64);
⋮----
// 2. Upload to cloud storage & save screenshot to database
⋮----
// 3. Run AI analysis on screenshot
⋮----
// 3. Return results
</file>

<file path="src/modules/screenshot/index.ts">

</file>

<file path="src/modules/screenshot/screenshot-crud.ts">
import type { Prisma } from "@prisma/client";
import { z } from "zod";
⋮----
import { prisma } from "@/lib/db";
⋮----
// Zod schema for screenshot validation
⋮----
// export const ScreenshotCreateDataSchema = ScreenshotSchema.omit({ reviewId: true });
export type ScreenshotCreateData = z.infer<typeof ScreenshotSchema>;
⋮----
// Create a new screenshot
export async function createScreenshot(data: ScreenshotCreateData)
⋮----
// Get screenshot by ID
export async function getScreenshotById(id: string)
⋮----
// Get screenshots by review ID
export async function getScreenshotsByReviewId(reviewId: string, page = 1, limit = 10)
⋮----
// Get list of screenshots
export async function getListOfScreenshots(
  filter: Prisma.ScreenshotWhereInput,
  page = 1,
  limit = 10
)
⋮----
// Update a screenshot
export async function updateScreenshot(
  id: string,
  data: Partial<z.infer<typeof ScreenshotSchema>>
)
⋮----
// Delete a screenshot
export async function deleteScreenshot(id: string)
</file>

<file path="src/modules/thumbnail/create-thumbnail.ts">
import type { LinkMetadata } from "@prisma/client";
import { randomUUID } from "crypto";
⋮----
import { env } from "@/env";
import { uploadFileBuffer } from "@/lib/cloud-storage";
import { screenshot } from "@/lib/playwright";
⋮----
import { getTemplateUrl } from "./thumbnail-utils";
⋮----
export type TemplateName = (typeof templateNames)[number];
⋮----
export type CreateWithTemplateResult = {
  shareImageUrl: string;
  websiteScreenshotUrl?: string;
  metadata?: Partial<LinkMetadata>;
};
⋮----
export async function createThumbnailByImageUrl(
  imageUrl: string,
  options?: {
    template: TemplateName;
    metadata: Partial<LinkMetadata>;
    device: "desktop" | "tablet" | "mobile";
  }
): Promise<CreateWithTemplateResult>
⋮----
// create thumbnail
⋮----
// upload to cloudflare r2
⋮----
export async function captureWebsiteScreenshot(
  url: string,
  options?: { device: "desktop" | "tablet" | "mobile" }
)
⋮----
/**
 * Create a thumbnail with a template
 * @param url - The URL of the website to screenshot
 * @param options - The options
 * @returns The thumbnail
 */
export async function createThumbnailByWebUrl(
  url: string,
  options?: {
    template: TemplateName;
    metadata: Partial<LinkMetadata>;
    device: "desktop" | "tablet" | "mobile";
  }
): Promise<CreateWithTemplateResult>
⋮----
// create website screenshot
⋮----
// create thumbnail
</file>

<file path="src/modules/thumbnail/index.ts">

</file>

<file path="src/modules/thumbnail/thumbnail-utils.ts">
import { env } from "@/env";
⋮----
export function getTemplateUrl(template: string, imageUrl?: string)
</file>

<file path="src/modules/user/create.ts">
import { toBool } from "diginext-utils/dist/object";
⋮----
import { AppRoleDefault } from "@/config/constants";
import { prisma } from "@/lib/db";
import { makeUniqueSlug } from "@/lib/utils";
⋮----
import generateWorkspaceByUser from "../workspace/generateWorkspaceByUser";
⋮----
export interface ICreateNewUserByAccount {
  name: string;
  email?: string;
  image?: string;
  accountId?: string;
}
⋮----
export interface ICreateNewUserByPassword {
  name: string;
  email: string;
  password: string;
  validEmail?: boolean;
}
⋮----
export async function createNewUser(props: ICreateNewUserByAccount | ICreateNewUserByPassword)
⋮----
// let urlRedirect = "/profile";
⋮----
// Check if user with this email already exists
⋮----
// User exists, update instead of create
⋮----
// generate username (slug)
⋮----
// Find or create default role
⋮----
// Create new user
⋮----
// Generate workspace for new users
// const countWorkspace = await prisma.workspace.count({
//   where: {
//     creatorId: user.id,
//   },
// });
// if (countWorkspace === 0) {
//   try {
//     const ws = await generateWorkspaceByUser(user);
//     if (ws) {
//       user = await prisma.user.update({
//         where: { id: user.id },
//         data: { activeWorkspaceId: ws.id },
//       });
//       console.info(`Generated workspace for user ${user.id}`);
//     } else {
//       console.warn(`Failed to generate workspace for user ${user.id}`);
//     }
//   } catch (wsError) {
//     console.error(`Error generating workspace for user ${user.id}:`, wsError);
//   }
// }
</file>

<file path="src/modules/user/get-user.ts">
import { prisma } from "@/lib/db";
⋮----
export const getUser = async (id: string) =>
</file>

<file path="src/modules/user/index.ts">

</file>

<file path="src/modules/user/user-mask.ts">
import type { User } from "@prisma/client";
⋮----
export type MaskedUser = Omit<User, "password" | "validEmail" | "createdAt" | "updatedAt">;
⋮----
export function maskUser(user: User): MaskedUser
</file>

<file path="src/modules/user-balance/index.ts">

</file>

<file path="src/modules/user-balance/user-balance-crud.ts">
import { CashType } from "@prisma/client";
⋮----
import { prisma } from "@/lib/db";
⋮----
export async function createUserBalance(userId: string)
⋮----
export async function getUserBalance(userId: string)
⋮----
export async function addCreditsToUserBalance(userId: string, amount: number)
</file>

<file path="src/modules/web-url/index.ts">

</file>

<file path="src/modules/web-url/web-url-crud.ts">
import type { Prisma } from "@prisma/client";
import { z } from "zod";
⋮----
import { prisma } from "@/lib/db";
⋮----
url: z.string().url(), // Changed from destinationUrl to match Prisma schema
⋮----
meta: z.record(z.any()).optional(), // Using Json type from Prisma schema
⋮----
categories: z.array(z.string()).optional(), // For WebUrlCategory relationship
⋮----
export type WebUrlCreateData = z.infer<typeof WebUrlCreateDataSchema>;
⋮----
export async function createWebUrl(input: WebUrlCreateData)
⋮----
// validate input
⋮----
// Handle categories separately if provided
⋮----
export async function updateWebUrl(
  id: string,
  data: Partial<WebUrlCreateData>,
  options?: { include?: Prisma.WebUrlInclude }
)
⋮----
deleteMany: {}, // Remove existing categories
⋮----
export async function deleteWebUrl(id: string)
</file>

<file path="src/modules/web-url/web-url-parse.ts">
import type express from "express";
import uaParser from "ua-parser-js";
import { z } from "zod";
⋮----
import { getClientIp, getInfoIP } from "@/lib/network/ip";
⋮----
export type LinkInfo = z.infer<typeof LinkInfoSchema>;
⋮----
export async function parseLinkInfoFromRequest(req: express.Request)
</file>

<file path="src/modules/workspace/generateWorkspaceByUser.ts">
import type { User } from "@prisma/client";
import { toBool } from "diginext-utils/dist/object";
import { z } from "zod";
⋮----
import { WorkspacePermissionDefault, WorkspaceRoleDefault } from "@/config/constants";
import { prisma } from "@/lib/db";
import { makeUniqueSlug } from "@/lib/utils/string";
⋮----
type GenerateWorkspaceByUserProps = z.infer<typeof GenerateWorkspaceInputSchema>;
⋮----
export default async function generateWorkspaceByUser(
  user: User,
  input?: GenerateWorkspaceByUserProps
)
⋮----
//
⋮----
// Validate input
⋮----
// Check if user already has a workspace
⋮----
// Create new workspace
⋮----
// Create some default role
⋮----
// Create permissions for each role
⋮----
// Add User to the Admin role
</file>

<file path="src/modules/workspace/index.ts">

</file>

<file path="src/modules/workspace/initWorkspacePermissions.ts">
import { WorkspacePermissionDefault } from "@/config/constants";
import { prisma } from "@/lib/db";
⋮----
export async function initWorkspacePermissions()
</file>

<file path="src/modules/type.ts">

</file>

<file path="src/routes/api/api-healthz.ts">
import express from "express";
⋮----
/**
 * @swagger
 * /api/v1/healthz:
 *   get:
 *     summary: Check the health status of the service
 *     tags: [Health]
 *     responses:
 *       200:
 *         description: Service is healthy
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: Service is healthy
 *                 data:
 *                   type: object
 *                   properties:
 *                     status:
 *                       type: string
 *                       example: OK
 */
</file>

<file path="src/routes/api/api-key.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
import { z } from "zod";
⋮----
import { validateSession, verifyRequest } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { generateRandomApiKey } from "@/lib/utils/string/random";
</file>

<file path="src/routes/api/api-order.ts">
/* eslint-disable prettier/prettier */
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
⋮----
import { validateSession, verifyRequest } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { apiKeyAuth } from "@/middlewares/api_key_auth";
import { respondFailure, respondSuccess } from "@/modules/response/respond-helper";
</file>

<file path="src/routes/api/api-payment.ts">
import express from "express";
import { z } from "zod";
⋮----
import { prisma } from "@/lib/db";
⋮----
// Base URL: /api/v1/payments
⋮----
// Define the schema for the topup request
⋮----
// Topup route
⋮----
// Validate request body
⋮----
// Here you would implement the logic to process the topup
⋮----
// If success, update the user balance
⋮----
// Respond with success following standard API response
⋮----
// Handle different types of errors with appropriate status codes
</file>

<file path="src/routes/api/api-profile.ts">
import express from "express";
⋮----
import { validateSession } from "@/lib/auth";
import { apiKeyAuth } from "@/middlewares/api_key_auth";
import { maskUser } from "@/modules/user";
import { getUser } from "@/modules/user/get-user";
</file>

<file path="src/routes/api/api-upload.ts">
import express from "express";
import multer from "multer";
import { z } from "zod";
⋮----
import { validateSession } from "@/lib/auth";
import { uploadFileBuffer } from "@/lib/cloud-storage/storage-upload";
import { apiKeyAuth } from "@/middlewares/api_key_auth";
import { getUser } from "@/modules/user";
⋮----
// Zod schema for file upload validation
⋮----
// Check if file exists
⋮----
// Validate file using Zod
⋮----
// Generate unique filename with timestamp
⋮----
// Upload to Cloudflare storage
⋮----
// Return upload result
</file>

<file path="src/routes/auth/github.ts">
import { generateState, OAuth2RequestError } from "arctic";
import express from "express";
import { parseCookies, serializeCookie } from "oslo/cookie";
⋮----
import { env } from "@/env";
import { github, lucia } from "@/lib/auth";
import { uploadFileBuffer } from "@/lib/cloud-storage";
import { prisma } from "@/lib/db";
import { createNewUser, type ICreateNewUserByAccount } from "@/modules/user";
import generateWorkspaceByUser from "@/modules/workspace/generateWorkspaceByUser";
⋮----
interface GitHubUser {
  id: number;
  name: string;
  login: string;
  email: string;
  avatar_url: string;
}
⋮----
// redirectUri
⋮----
// exchange code for tokens
⋮----
// get Github user info
⋮----
// check if user already exists
⋮----
// user already exists
⋮----
// check if no "image" field in user
⋮----
// download image and upload to cloudflare
⋮----
// update user with image
⋮----
// create new session
⋮----
// create new user
⋮----
// check if no "image" field in user
⋮----
// download image and upload to cloudflare
⋮----
// update user with image
⋮----
// create account
⋮----
// update user with account
⋮----
// create session
⋮----
// CREATE/SELECT WORKSPACE FOR USERS
// if this user has only 1 workspace, set it as the active workspace
⋮----
// if greater than 1 workspace, redirect to workspace selection page
⋮----
// if no workspace, generate 1 workspace
⋮----
// invalid code
</file>

<file path="src/routes/auth/google.ts">
import { generateState } from "arctic";
import { createHash, randomBytes } from "crypto";
import express from "express";
import { parseCookies, serializeCookie } from "oslo/cookie";
import { z } from "zod";
⋮----
import { env } from "@/env";
import { google, lucia } from "@/lib/auth";
import { uploadFileBuffer } from "@/lib/cloud-storage";
import { prisma } from "@/lib/db";
import { createNewUser, type ICreateNewUserByAccount } from "@/modules/user";
import generateWorkspaceByUser from "@/modules/workspace/generateWorkspaceByUser";
⋮----
interface GoogleUser {
  id: string;
  email: string;
  name: string;
  picture: string;
}
⋮----
function generateCodeVerifier(): string
⋮----
function base64URLEncode(buffer: Buffer): string
⋮----
// Optional:
// Generate code challenge (S256 method)
// This is used if you need to send a code challenge to the authorization server.
export function generateCodeChallenge(verifier: string): string
⋮----
/**
   * @example "/login/google?redirect_uri=/profile"
   */
⋮----
// console.log("Received callback:", { code, state, storedState, codeVerifier });
⋮----
// redirectUri
⋮----
// Fetch user info
⋮----
// check if no "image" field in user
⋮----
// download image and upload to cloudflare
⋮----
// update user with image
⋮----
// check if no "image" field in user
⋮----
// download image and upload to cloudflare
⋮----
// update user with image
⋮----
// create "account" associated with this "user"
⋮----
// update user with account
⋮----
// CREATE/SELECT WORKSPACE FOR USERS
// if this user has only 1 workspace, set it as the active workspace
⋮----
// if greater than 1 workspace, redirect to workspace selection page
⋮----
// if no workspace, generate 1 workspace
</file>

<file path="src/routes/auth/index.ts">

</file>

<file path="src/routes/auth/login.ts">
import AppConfig from "@/config/AppConfig";
import { clientEnv } from "@/env";
⋮----
import { githubLoginRouter } from "./github";
import { googleLoginRouter } from "./google";
import { authRouter } from "./router";
</file>

<file path="src/routes/auth/logout.ts">
import { lucia } from "@/lib/auth";
import { prisma } from "@/lib/db";
⋮----
import { authRouter } from ".";
⋮----
// set user.activeWorkspaceId to null
⋮----
// set user.activeWorkspaceId to null
</file>

<file path="src/routes/auth/router.ts">
import express from "express";
</file>

<file path="src/routes/pages/checkout.ts">
import { OrderStatus } from "@prisma/client";
⋮----
import { clientEnv, env } from "@/env";
import { prisma } from "@/lib/db";
import { initPolar } from "@/lib/payment/polar";
import { getPlanByPolarProductId } from "@/modules/plan/plans";
⋮----
import { pageRouter } from "./router";
⋮----
// validate
⋮----
// success url
⋮----
// Get plan details
⋮----
// create an order in our database
⋮----
// create a checkout url
⋮----
// update the order with the checkout id
⋮----
// redirect to the checkout url
</file>

<file path="src/routes/pages/home.ts">
import AppConfig from "@/config/AppConfig";
import { clientEnv } from "@/env";
import { prisma } from "@/lib/db";
import { maskUser } from "@/modules/user";
⋮----
import { pageRouter } from "./router";
⋮----
// console.log(`user :>>`, user);
</file>

<file path="src/routes/pages/payment-success.ts">
import AppConfig from "@/config/AppConfig";
import { clientEnv } from "@/env";
import { validateSession } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { maskUser } from "@/modules/user";
⋮----
import { pageRouter } from "./router";
⋮----
// if (!user) return res.redirect("/login");
</file>

<file path="src/routes/pages/privacy.ts">
import AppConfig from "@/config/AppConfig";
import { clientEnv } from "@/env";
import { prisma } from "@/lib/db";
import { maskUser } from "@/modules/user";
⋮----
import { pageRouter } from "./router";
⋮----
// console.log(`user :>>`, user);
</file>

<file path="src/routes/pages/router.ts">
import express from "express";
⋮----
import AppConfig from "@/config/AppConfig";
import { clientEnv } from "@/env";
⋮----
/**
 * Router for pages
 */
</file>

<file path="src/routes/pages/workspace-select.ts">
import AppConfig from "@/config/AppConfig";
import { clientEnv } from "@/env";
import { validateSession, verifyRequest } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { maskUser } from "@/modules/user";
import { getUser } from "@/modules/user/get-user";
⋮----
import { authRouter } from "../auth/router";
</file>

<file path="src/routes/main.ts">
import express from "express";
⋮----
/**
 * Main router for pages
 */
</file>

<file path="src/views/common/button.ejs">
<% 
const buttonHref = typeof href !== 'undefined' ? href : '#'; 
const buttonTarget = typeof target !== 'undefined' ? target : '_self';
const buttonColor = typeof color !== 'undefined' ? color : 'bg-blue-500 hover:bg-blue-600';
const buttonDataId = typeof dataId !== 'undefined' ? dataId : '';
const buttonClassName = typeof className !== 'undefined' ? className : '';
%>

<a href="<%= buttonHref %>" target="<%= buttonTarget %>" class="transition-colors no-underline !px-6 !py-3 rounded-xl text-white <%= buttonColor %> <%= buttonClassName %>" <% if (buttonDataId !== '') { %>data-id="<%= buttonDataId %>" <% } %>>
  <%- content %>
</a>
</file>

<file path="src/views/common/drawers.ejs">
<%
// Drawer Configuration
const drawerId = locals.drawerId || 'default-drawer';
const drawerTitle = locals.drawerTitle || 'Drawer';
const enableDrawerHeader = locals.enableDrawerHeader ?? true;
const drawerContent = locals.drawerContent || '';
const drawerFooter = locals.drawerFooter || '';
const drawerPlacement = locals.drawerPlacement || 'right';
const drawerSize = locals.drawerSize || 'medium';
const drawerMaskCloseable = locals.drawerMaskCloseable ?? true;
const drawerActions = locals.drawerActions || [];
%>
<%# Required: "/assets/js/plugins/drawers.js" %>
<div id="<%= drawerId %>" class="fixed inset-0 z-[1000] drawer-container opacity-0 invisible" data-drawer-open="false" data-drawer-level="1" data-drawer-placement="<%= drawerPlacement %>">
  <% if (drawerMaskCloseable) { %>
  <div class="drawer-mask absolute inset-0 bg-black/50 dark:bg-black/70 
              opacity-0 transition-opacity duration-300 
              cursor-pointer"></div>
  <% } %>

  <div class="drawer-content fixed 
              <%= 
                drawerPlacement === 'right' ? 'right-0 top-0 h-full' : 
                drawerPlacement === 'left' ? 'left-0 top-0 h-full' : 
                drawerPlacement === 'top' ? 'top-0 w-full' : 
                'bottom-0 w-full'
              %> 
              <%= 
                drawerSize === 'small' ? 'w-[90%] md:w-1/3' : 
                drawerSize === 'medium' ? 'w-[90%] md:w-1/2' : 
                'w-[90%] md:w-2/3'
              %> 
              bg-white dark:bg-gray-800 
              transform 
              transition-all duration-300 
              <%= 
                drawerPlacement === 'right' ? 'translate-x-full' : 
                drawerPlacement === 'left' ? '-translate-x-full' : 
                drawerPlacement === 'top' ? '-translate-y-full' : 
                'translate-y-full'
              %>
              sm:w-[90%] sm:mx-auto
              sm:max-w-[90%]
              flex flex-col
              <%= 
                (drawerPlacement === 'top' || drawerPlacement === 'bottom') ? 
                'sm:w-[70%] sm:max-w-[70%]' : ''
              %>">

    <% if (enableDrawerHeader) { %>
    <div class="drawer-header px-10 py-4 border-b flex justify-between items-center">
      <h2 class="text-3xl font-semibold flex-grow"><%= drawerTitle %></h2>
      <button class="text-gray-600 dark:text-gray-300 size-[40px] rounded-full bg-white dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" onclick="closeDrawer('<%= drawerId %>')">
        <i class="ri-close-line text-2xl"></i>
      </button>
    </div>
    <% } %>

    <div class="drawer-body p-10 flex-grow overflow-y-auto">
      <%- drawerContent %>
    </div>

    <% if (drawerFooter) { %>
    <div class="drawer-footer px-10 py-4 border-t">
      <%- drawerFooter %>
    </div>
    <% } %>

    <% if (drawerActions && drawerActions.length) { %>
    <div class="drawer-actions p-4 flex justify-end space-x-2">
      <% drawerActions.forEach(action => { %>
      <button class="<%= action.className %>" onclick="<%= action.onClick %>">
        <%= action.label %>
      </button>
      <% }); %>
    </div>
    <% } %>
  </div>
</div>
</file>

<file path="src/views/common/header-dashboard.ejs">
<!-- header area start -->
<header class="header-style-one header--sticky <%= typeof page_slug !== 'undefined' ? page_slug : '' %>">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <div class="header-style-one-wrapper">
          <div class="logo-area">
            <a href="/" class="logo">
              <img class="light" src="/images/brand/boost-together-logo-colorful.svg" alt="logo" width="150">
              <img class="dark" src="/images/brand/boost-together-logo-colorful.svg" alt="logo" width="150">
            </a>
          </div>

          <nav class="main-nav-area m-0 !ml-10">
            <ul class="list-unstyled fluxi-desktop-menu">
              <li class="menu-item <%= path_name === "/" ? "active" : "" %>">
                <a href="/" class="fluxi-dropdown-main-element"><i class="ri-home-2-line"></i> Home</a>
              </li>

              <li class="menu-item <%= path_name === "/dashboard/group-ads" ? "active" : "" %>">
                <a href="/dashboard/group-ads" class="fluxi-dropdown-main-element">My Group Ads</a>
              </li>
            </ul>
          </nav>

          <div class="flex-grow"></div>

          <div class="button-area-start gap-4">
            <!-- <a class="call-us" href="tel:123-456-7890">Call Us : +134 (99) 865</a> -->
            <% if (user) { %>
            <a href="/logout" class="tippy" data-tippy-content="Logout" data-tippy-placement="bottom"><i class="ri-logout-box-line"></i></a>
            <span>Hi, <a href="/profile" class="tippy" data-tippy-content="Profile" data-tippy-placement="bottom"><%= user.name %> <i class="ri-user-line"></i></a></span>
            <a href="/create-group-ad" class="tippy rts-btn btn-primary" data-tippy-content="Coming Soon" data-tippy-placement="bottom">
              <i class="ri-rocket-2-line"></i> Create Group Ad
            </a>
            <% } else { %>
            <a href="/login" class="rts-btn btn-primary">Get Started</a>
            <% } %>

            <div class="menu-btn" id="menu-btn">
              <svg width="20" height="16" viewBox="0 0 20 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect y="14" width="20" height="2" fill="#1F1F25"></rect>
                <rect y="7" width="20" height="2" fill="#1F1F25"></rect>
                <rect width="20" height="2" fill="#1F1F25"></rect>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>
<!-- header area end -->

<!-- side bar area  -->
<div id="side-bar" class="side-bar header-two">
  <button class="close-icon-menu !m-0 !top-0 !left-0"><i class="fa-sharp fa-thin fa-xmark !m-0"></i></button>
  <!-- mobile menu area start -->
  <div class="mobile-menu-main">
    <nav class="nav-main mainmenu-nav mt--30">
      <ul class="mainmenu metismenu" id="mobile-menu-active">
        <li class="<%= path_name === "/" ? "active" : "" %>">
          <a href="/" class="main"><i class="ri-home-2-line"></i> Home</a>
        </li>

        <li class="<%= path_name === "/dashboard/group-ads" ? "active" : "" %>">
          <a href="/dashboard/group-ads" class="main">My Group Ads</a>
        </li>

        <div class="mt-8 flex flex-col gap-6">
          <% if (user) { %>
          <div>
            <a href="/logout" class="tippy" data-tippy-content="Logout" data-tippy-placement="bottom"><i class="ri-logout-box-line"></i></a>
            <span>Hi, <a href="/profile" class="tippy" data-tippy-content="Profile" data-tippy-placement="bottom"><%= user.name %> <i class="ri-user-line"></i></a></span>
          </div>
          <a href="/create-group-ad" class="tippy rts-btn btn-primary max-w-none" data-tippy-content="Coming Soon" data-tippy-placement="bottom">
            <i class="ri-rocket-2-line"></i> Create Group Ad
          </a>
          <% } else { %>
          <a href="/login" class="rts-btn btn-primary">Get Started</a>
          <% } %>
        </div>
      </ul>
    </nav>

    <ul class="social-area-one pl--20 mt--100">
      <li><a href="https://fb.com/letsboosttogether" target="_blank"><i class="ri-facebook-circle-fill"></i></a></li>
      <li><a href="https://x.com/boost_together" target="_blank"><i class="ri-twitter-x-line"></i></a></li>
      <li><a href="https://youtube.com/@BoostTogether" target="_blank"><i class="ri-youtube-line"></i></a></li>
    </ul>
  </div>
  <!-- mobile menu area end -->
</div>
<!-- side abr area end -->
</file>

<file path="src/views/common/input-tags.ejs">
<%
const className = locals.className || "";
const label = locals.label || "";
const id = locals.id || "";
const name = locals.name || id; // Add a name attribute for form submission
const placeholder = locals.placeholder || "";
const data = locals.data || [];
const allowAddMore = locals.allowAddMore ?? true;
const onChange = locals.onChange || null; // Change to null instead of empty function
%>

<!-- Countries Selection -->
<div class="flex flex-col gap-4 <%= className %>">
  <label for="<%= id %>" class="text-xl font-semibold"><%= label %></label>
  <div id="<%= id %>-container" class="relative">
    <input type="text" id="<%= id %>" placeholder="<%= placeholder %>" class="w-full p-3 border rounded-lg bg-white dark:bg-gray-700 dark:border-gray-600" />

    <!-- Hidden input to store selected items -->
    <input type="hidden" name="<%= name %>" id="<%= id %>-hidden-input" value="" />

    <div id="<%= id %>-dropdown" class="absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg dark:bg-gray-800 hidden">
      <!-- Dynamically populated data list -->
    </div>
    <div id="<%= id %>-selected-data" class="flex flex-wrap gap-2 mt-2">
      <!-- Selected items will be added here as tags -->
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const inputElement = document.getElementById('<%= id %>');
    const dropdownElement = document.getElementById('<%= id %>-dropdown');
    const selectedContainer = document.getElementById('<%= id %>-selected-data');
    const hiddenInput = document.getElementById('<%= id %>-hidden-input');

    // Predefined list of items
    const data = <%- JSON.stringify(data) %>;
    const allowAddMore = <%= allowAddMore %>;
    const onChangeFunctionName = '<%= onChange %>';

    // Array to track selected items
    let selectedItems = [];
    let currentFocusIndex = -1;

    // Improved onChange handling
    function triggerOnChange(selectedItems) {
      // Check if onChange is a string function name
      if (typeof onChangeFunctionName === 'string') {
        const globalFunction = window[onChangeFunctionName];
        if (typeof globalFunction === 'function') {
          globalFunction(selectedItems);
        } else {
          console.warn(`input-tags.ejs > onChange: Global function '${onChangeFunctionName}' not found`);
        }
      }
      // Check if onChange is a function passed directly
      else if (typeof onChangeFunctionName === 'function') {
        onChangeFunctionName(selectedItems);
      }
    }

    // Update hidden input and selectedItems array
    // Update hidden input and selectedItems array
    function updateHiddenInput() {
      // Store selected item IDs or full objects based on your data structure
      hiddenInput.value = JSON.stringify(selectedItems);

      // Call onChange if it exists
      if (onChangeFunctionName) {
        try {
          triggerOnChange(selectedItems);
        } catch (error) {
          console.error("input-tags.ejs > onChange callback error :>>", error);
        }
      }
    }

    // Filter and show countries as user types
    inputElement.addEventListener('input', function() {
      const searchTerm = this.value.toLowerCase();
      const filteredData = data.filter(item =>
        item.name.toLowerCase().includes(searchTerm)
      );

      // Clear previous dropdown
      dropdownElement.innerHTML = '';
      dropdownElement.classList.remove('hidden');
      currentFocusIndex = -1;

      // Populate dropdown
      filteredData.forEach((item, index) => {
        const countryElement = document.createElement('div');
        countryElement.textContent = item.name;
        countryElement.classList.add(
          'px-6', 'py-2', 'hover:bg-gray-100', 'dark:hover:bg-gray-700', 'cursor-pointer'
        );
        countryElement.dataset.index = index;
        countryElement.addEventListener('click', () => addTagItem(item));
        dropdownElement.appendChild(countryElement);
      });

      // Add option to create new tag if allowed
      if (allowAddMore && searchTerm && !filteredData.length) {
        const createNewElement = document.createElement('div');
        createNewElement.textContent = `Create new: "${searchTerm}"`;
        createNewElement.classList.add(
          'px-6', 'py-2', 'hover:bg-gray-100', 'dark:hover:bg-gray-700',
          'cursor-pointer', 'text-primary', 'font-semibold'
        );
        createNewElement.addEventListener('click', () => {
          const newItem = {
            name: searchTerm,
            isNew: true
          };
          addTagItem(newItem);
        });
        dropdownElement.appendChild(createNewElement);
      }

      // Hide dropdown if no results and not allowing new items
      if (filteredData.length === 0 && !allowAddMore) {
        dropdownElement.classList.add('hidden');
      }
    });

    // Keyboard navigation for dropdown
    inputElement.addEventListener('keydown', function(event) {
      const dropdownItems = dropdownElement.children;

      if (event.key === 'ArrowDown') {
        event.preventDefault();
        currentFocusIndex = Math.min(currentFocusIndex + 1, dropdownItems.length - 1);
        updateFocus();
      } else if (event.key === 'ArrowUp') {
        event.preventDefault();
        currentFocusIndex = Math.max(currentFocusIndex - 1, 0);
        updateFocus();
      } else if (event.key === 'Enter') {
        event.preventDefault();
        if (currentFocusIndex >= 0) {
          const selectedItem = dropdownItems[currentFocusIndex];
          const itemData = selectedItem.textContent.startsWith('Create new:') ? {
              name: selectedItem.textContent.replace('Create new: "', '').replace('"', ''),
              isNew: true
            } :
            data.find(item => item.name === selectedItem.textContent);
          addTagItem(itemData);
        } else if (allowAddMore && this.value.trim()) {
          // If no item selected but input has value and adding is allowed
          const newItem = {
            name: this.value.trim(),
            isNew: true
          };
          addTagItem(newItem);
        }
      }
    });

    // Update focus styling
    function updateFocus() {
      const dropdownItems = dropdownElement.children;

      // Remove previous focus
      Array.from(dropdownItems).forEach(item => {
        item.classList.remove('bg-gray-200', 'dark:bg-gray-600');
      });

      // Add focus to current item
      if (currentFocusIndex >= 0 && currentFocusIndex < dropdownItems.length) {
        const focusedItem = dropdownItems[currentFocusIndex];
        focusedItem.classList.add('bg-gray-200', 'dark:bg-gray-600');
        focusedItem.scrollIntoView({
          block: 'nearest'
        });
      }
    }

    // Add tag item
    function addTagItem(item) {
      // Prevent duplicate items
      const existingTags = selectedItems.map(selectedItem =>
        typeof selectedItem === 'object' ? selectedItem.name : selectedItem
      );

      if (!existingTags.includes(item.name)) {
        const tag = document.createElement('div');
        tag.classList.add(
          'flex', 'items-center', 'bg-gray-200', 'dark:bg-gray-700',
          'px-6', 'py-2', 'rounded-full', 'text-2xl'
        );

        const tagText = document.createElement('span');
        tagText.textContent = item.name;

        // Add visual indicator for newly created tags
        if (item.isNew) {
          tagText.classList.add('italic', 'text-primary');
        }

        const removeButton = document.createElement('span');
        removeButton.innerHTML = '<i class="ri-close-line"></i>';
        removeButton.classList.add(
          'ml-2', 'cursor-pointer', 'text-red-500', 'font-bold'
        );
        removeButton.addEventListener('click', () => {
          // Remove from selected container
          selectedContainer.removeChild(tag);

          // Remove from selectedItems array
          selectedItems = selectedItems.filter(selectedItem =>
            (typeof selectedItem === 'object' ? selectedItem.name : selectedItem) !== item.name
          );

          // Update hidden input
          updateHiddenInput();
        });

        tag.appendChild(tagText);
        tag.appendChild(removeButton);
        selectedContainer.appendChild(tag);

        // Add to selectedItems
        selectedItems.push(item);

        // Update hidden input
        updateHiddenInput();
      }

      // Clear input and dropdown
      inputElement.value = '';
      dropdownElement.classList.add('hidden');
      currentFocusIndex = -1;
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
      if (!inputElement.contains(event.target) &&
        !dropdownElement.contains(event.target)) {
        dropdownElement.classList.add('hidden');
        currentFocusIndex = -1;
      }
    });
  });
</script>
</file>

<file path="src/views/common/input-upload.ejs">
<%
const className = locals.className || "";
const label = locals.label || "Upload File";
const id = locals.id || "file-upload";
const name = locals.name || id;
const placeholder = locals.placeholder || "Click to upload or drag and drop";
const accept = locals.accept || "image/*";
const maxSize = locals.maxSize || "800x400px";
const uploadUrl = locals.uploadUrl || "/api/v1/upload";
%>

<div class="flex flex-col gap-4 <%= className %>">
  <label for="<%= id %>" class="text-xl font-semibold"><%= label %></label>
  <div id="<%= id %>-container" class="relative w-full">
    <input type="file" id="<%= id %>" name="<%= name %>" class="hidden" accept="<%= accept %>" />
    <input type="hidden" id="<%= id %>-url" name="<%= name %>-url" />

    <label for="<%= id %>" class="flex flex-col items-center justify-center w-full h-64 border-2 border-dashed rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800">
      <div class="flex flex-col items-center justify-center pt-5 pb-6">
        <i class="ri-upload-cloud-2-line text-4xl text-gray-500 mb-4"></i>
        <p class="mb-2 text-sm text-gray-500 dark:text-gray-400">
          <span class="font-semibold">Click to upload</span> or drag and drop
        </p>
        <p class="text-xs text-gray-500 dark:text-gray-400">
          <%= accept.toUpperCase().replace('*', '') %> (MAX. <%= maxSize %>)
        </p>
      </div>
    </label>

    <div id="<%= id %>-preview" class="mt-4 grid grid-cols-3 gap-4">
      <!-- File preview will be added here dynamically -->
    </div>

    <div id="<%= id %>-upload-status" class="mt-2 text-sm"></div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('<%= id %>');
    const previewContainer = document.getElementById('<%= id %>-preview');
    const uploadStatusContainer = document.getElementById('<%= id %>-upload-status');
    const uploadUrl = '<%= uploadUrl %>';

    function clearStatus() {
      uploadStatusContainer.innerHTML = '';
      uploadStatusContainer.classList.remove('text-red-500', 'text-green-500');
    }

    function showStatus(message, isError = false) {
      clearStatus();
      uploadStatusContainer.textContent = message;
      uploadStatusContainer.classList.add(isError ? 'text-red-500' : 'text-green-500');
    }

    function uploadFile(file) {
      const formData = new FormData();
      formData.append('image', file);

      fetch(uploadUrl, {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.status === 1) {
            showStatus('Upload successful!');
            console.log("input-upload.ejs > file upload > success :>>", data.data.publicUrl);

            // Update hidden input
            document.getElementById('<%= id %>-url').value = data.data.publicUrl;

            // Update the preview image with the uploaded URL
            const previewImage = previewContainer.querySelector(`[data-filename="${file.name}"] img`);
            if (previewImage) {
              previewImage.src = data.data.publicUrl;
            }
          } else {
            throw new Error(data.message || 'Upload failed');
          }
        })
        .catch(error => {
          console.error("input-upload.ejs > file upload > error :>>", error);
          showStatus(error.message || 'Upload failed', true);
        });
    }

    fileInput.addEventListener('change', function(event) {
      // Clear previous previews and status
      previewContainer.innerHTML = '';
      clearStatus();

      // Handle multiple file uploads
      Array.from(this.files).forEach(file => {
        // Validate file type and size
        const validTypes = ['<%= accept %>'.replace('*', '')];
        const isValidType = validTypes.some(type => file.type.includes(type));
        const isValidSize = file.size <= 5 * 1024 * 1024; // 5MB limit

        if (isValidType && isValidSize) {
          // Create preview
          const filePreviewWrapper = document.createElement('div');
          filePreviewWrapper.classList.add(
            'relative', 'border', 'rounded-lg', 'overflow-hidden'
          );
          filePreviewWrapper.dataset.filename = file.name;

          // Create image preview
          const previewImage = document.createElement('img');
          previewImage.classList.add('w-full', 'h-48', 'object-cover');

          // Create file info overlay
          const overlayContainer = document.createElement('div');
          overlayContainer.classList.add(
            'absolute', 'bottom-0', 'left-0', 'right-0',
            'bg-black', 'bg-opacity-50', 'text-white',
            'p-2', 'flex', 'justify-between', 'items-center'
          );

          const fileNameSpan = document.createElement('span');
          fileNameSpan.textContent = file.name;
          fileNameSpan.classList.add('text-sm', 'truncate', 'mr-2');

          const removeButton = document.createElement('span');
          removeButton.innerHTML = '<i class="ri-close-line"></i>';
          removeButton.classList.add(
            'cursor-pointer', 'text-red-500', 'font-bold'
          );
          removeButton.addEventListener('click', () => {
            // Remove from preview
            previewContainer.removeChild(filePreviewWrapper);

            // Clear the file input
            fileInput.value = '';
          });

          overlayContainer.appendChild(fileNameSpan);
          overlayContainer.appendChild(removeButton);

          // Read file as data URL for preview
          const reader = new FileReader();
          reader.onload = function(e) {
            previewImage.src = e.target.result;
          };
          reader.readAsDataURL(file);

          filePreviewWrapper.appendChild(previewImage);
          filePreviewWrapper.appendChild(overlayContainer);
          previewContainer.appendChild(filePreviewWrapper);

          // Upload the file
          uploadFile(file);
        } else {
          if (!isValidType) {
            console.error("input-upload.ejs > file upload > invalid file type :>>", file.type);
            showStatus(`Invalid file type. Please upload ${validTypes.join(', ')} files.`, true);
          }
          if (!isValidSize) {
            console.error("input-upload.ejs > file upload > file too large :>>", file.size);
            showStatus('File size must be less than 5MB', true);
          }
          fileInput.value = '';
        }
      });
    });

    // Drag and drop functionality
    const dropZone = document.querySelector('label[for="<%= id %>"]');

    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('border-primary-500');
    });

    dropZone.addEventListener('dragleave', () => {
      dropZone.classList.remove('border-primary-500');
    });

    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('border-primary-500');

      // Set dropped files to input
      fileInput.files = e.dataTransfer.files;

      // Trigger change event
      const event = new Event('change');
      fileInput.dispatchEvent(event);
    });
  });
</script>
</file>

<file path="src/views/common/link-copy.ejs">
<%
const link = typeof locals.link !== 'undefined' ? locals.link : '';
const borderEnabled = typeof locals.borderEnabled !== 'undefined' ? locals.borderEnabled : false;
%>

<pre class="link-copy w-full bg-gray-100 dark:bg-gray-900 p-4 rounded-md flex flex-row items-center overflow-auto <%- borderEnabled ? 'border border-gray-200 dark:border-gray-700' : '' %>">
  <code class="link-copy-code w-full text-green-500 dark:text-green-400 overflow-x-auto whitespace-nowrap text-wrap overflow-wrap-anywhere text-sm md:text-base" style="overflow-wrap: anywhere;"><%- link || '' %></code>
  <button class="link-copy-button flex flex-shrink-0 ml-2 p-1 dark:text-white bg-gray-200 dark:bg-gray-700 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
    </svg>
  </button>
</pre>

<script>
  document.querySelectorAll('.link-copy-button').forEach(button => {
    // remove previous listeners
    button.removeEventListener('click', function() {});
    button.addEventListener('click', function() {
      const linkText = this.parentElement.querySelector('.link-copy-code').textContent;
      navigator.clipboard.writeText(linkText).then(() => {
        // Change the icon to a check mark
        this.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        `;

        // Revert back to copy icon after 2 seconds
        setTimeout(() => {
          this.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
          `;
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy text: ', err);
      });
    });
  });
</script>
</file>

<file path="src/views/common/logo-horizontal.ejs">
<a class="flex flex-col items-center gap-2" href="/">
  <img src="/images/ziione-logo-text.svg" alt="Zii.one" class="h-12" />
</a>
</file>

<file path="src/views/common/logo-verticle.ejs">
<a class="flex flex-col items-center gap-2" href="/">
  <img src="/images/icon-ziione.svg" alt="Zii.one" class="size-20" />
  <img src="/images/ziione-text.svg" alt="Zii.one" class="h-10" />
</a>
</file>

<file path="src/views/common/mobile-menu.ejs">
<!-- side bar area  -->
<div id="mobile-menu" class="md:hidden hidden bg-white dark:bg-gray-900 shadow-md">
  <!-- mobile menu area start -->
  <div class="mobile-menu-main p-6 ">
    <nav class="nav-main mainmenu-nav">
      <ul class="space-y-4">
        <li class="<%= path_name === "/" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
          <a href="/" class="block py-2 font-heading">Home</a>
        </li>
        <li class="<%= path_name === "/pricing" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
          <a href="/pricing" class="block py-2 font-heading">Pricing</a>
        </li>
        <li class="<%= path_name === "/contribute" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
          <a href="https://github.com/mrgoonie/searchapi" target="_blank" class="block py-2 font-heading">Contribute</a>
        </li>
        <li class="<%= path_name === "/mcp" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
          <a href="https://github.com/mrgoonie/searchapi-mcp-server" target="_blank" class="block py-2 font-heading">MCP</a>
        </li>
        <li class="<%= path_name === "/api-docs" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
          <a href="/api-docs" class="block py-2 font-heading">API Docs</a>
        </li>
      </ul>
    </nav>

    <div class="mt-8 space-y-6">
      <% if (user) { %>
      <div class="flex items-center space-x-3">
        <a href="/logout" class="text-gray-600 hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400 tippy" data-tippy-content="Logout" data-tippy-placement="bottom">
          <i class="ri-logout-box-line"></i>
        </a>
        <span class="text-gray-700 dark:text-gray-300">
          Hi, <a href="/profile" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 tippy" data-tippy-content="Profile" data-tippy-placement="bottom">
            <%= user.name %> <i class="ri-user-line ml-1"></i>
          </a>
        </span>
      </div>
      <a href="/start-review" class="rts-btn btn-primary w-full text-center tippy" data-tippy-content="Start your review now!" data-tippy-placement="bottom">
        <i class="ri-rocket-2-line mr-2"></i> Start Review
      </a>
      <% } else { %>
      <a href="/login" class="rts-btn btn-primary w-full text-center">Get Started</a>
      <% } %>
    </div>

    <ul class="social-area-one flex space-x-4 mt-12 justify-center">
      <li><a href="https://x.com/goon_nguyen" target="_blank" class="text-gray-600 hover:text-black dark:text-gray-300 dark:hover:text-white"><i class="ri-twitter-x-line text-2xl"></i></a></li>
      <li><a href="https://fb.com/mrgoonie" target="_blank" class="text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400"><i class="ri-facebook-circle-fill text-2xl"></i></a></li>
    </ul>
  </div>
  <!-- mobile menu area end -->
</div>
<!-- side bar area end -->
</file>

<file path="src/views/common/thumb-facebook.ejs">
<% 
const backgroundImageUrl = locals.image_url || "/images/screenshot-sample-02.png";  
const className = locals.className || '';
%>
<div class="">
  <div class="flex flex-col text-left border border-[#cfd9de] rounded-lg shadow-lg overflow-hidden">
    <div class="w-full h-[160px] flex flex-col justify-center bg-gradient-to-r from-purple-500 to-blue-500 text-white p-6 <%= className %> dark:bg-gradient-to-r dark:from-purple-700 dark:to-blue-700" style="background-image: url('<%= backgroundImageUrl %>'); background-size: cover; background-position: center;">
    </div>
    <div class="w-full h-auto bg-gray-100 dark:bg-gray-800 p-2">
      <p class="text-gray-500 dark:text-gray-300 font-semibold text-[8px] font-[Helvetica]"><%= locals.link?.metadata?.url ? new URL(locals.link?.metadata?.url).host?.toUpperCase() : '' %></p>
      <p class="text-[10px] font-bold font-[Helvetica]"><%= locals.link?.metadata?.title ? locals.link?.metadata?.title.slice(0, 30) + (locals.link?.metadata?.title.length > 30 ? '...' : '') : '' %></p>
      <p class="text-gray-400 dark:text-gray-500 text-[8px] font-[Helvetica]"><%= locals.link?.metadata?.raw?.ogDescription && locals.link?.metadata?.raw?.ogDescription?.length > 50 ? locals.link?.metadata?.raw?.ogDescription.slice(0, 50) + '...' : locals.link?.metadata?.raw?.ogDescription %></p>
    </div>
  </div>
  <h5 class="text-gray-800 dark:text-gray-200">Facebook Preview</h5>
</div>
</file>

<file path="src/views/common/thumb-twitter.ejs">
<% 
const backgroundImageUrl = locals.image_url || "/images/screenshot-sample-02.png"; 
const className = locals.className || "";
const title = locals.link.metadata?.title ? locals.link.metadata.title.slice(0, 30) + "..." : "Untitled";
%>
<div class="flex flex-col <%= className %>">
  <div class="w-full h-full relative flex flex-col items-center justify-center bg-gradient-to-r from-purple-500 to-blue-500 text-white border border-[#cfd9de] p-6 rounded-lg shadow-lg" style="background-image: url('<%= backgroundImageUrl %>'); background-size: cover; background-position: center;">
    <p class="text-white text-xs absolute bottom-2 left-3 drop-shadow-[0_1px_1px_rgba(0,0,0,0.4)] z-10 bg-black/50 rounded px-2 py-1"><%= title %></p>
  </div>
  <h5>Twitter/X Preview</h5>
</div>
</file>

<file path="src/views/pages/404.ejs">
<div class="w-full flex justify-center items-center">
  <div class="h-auto text-center px-6">
    <h1 class="text-2xl font-bold py-2">404</h1>
    <h2 class="pb-4">Page not found</h2>
    <%- include("../common/button", {
      content: "<i class='ri-home-line mr-2'></i> Home",
      href: "/",
    }) %>

  </div>
</div>
</file>

<file path="src/views/pages/checkout-confirmation.ejs">
<div class="w-full h-screen flex justify-center items-center">
  <div class="h-auto text-center flex flex-col items-center">
    <script>
      async function checkOrderStatus() {
        const url = new URL(window.location.href);
        const checkoutId = url.searchParams.get("checkout_id");
        const order = await fetch(`/api/v1/order/status/${checkoutId}`).then(res => res.json());
        if (order.data.status === "PAID" || order.data.status === "CANCELLED") {
          window.location.href = "/profile";
        }
      }
      setInterval(checkOrderStatus, 10_000);
      checkOrderStatus();
    </script>

    <img src="/apple-touch-icon.png" alt="VidCap.xyz" class="size-20" />
    <h1 class="font-bold">Congratulations!</h1>

    <div class="flex flex-col items-center p-8 bg-white rounded-lg drop-shadow-2xl gap-4 my-4">
      <p>Thank you for your subscription. We are processing your payment, please wait.</p>
    </div>

    <p>
      Copyright <%= new Date().getFullYear() %>.
      <a href="https://x.com/goon_nguyen">@goon_nguyen</a>
    </p>
  </div>
</div>
</file>

<file path="src/views/pages/checkout-success.ejs">
<div class="w-full h-screen flex justify-center items-center">
  <div class="h-auto text-center flex flex-col items-center">

    <img src="/apple-touch-icon.png" alt="VidCap.xyz" class="size-20" />
    <h1 class="font-bold">Congratulations!</h1>

    <div class="flex flex-col items-center p-8 bg-white rounded-lg drop-shadow-2xl gap-4 my-4">
      <p>You have successfully subscribed to the <strong><%= plan.name %></strong> plan.</p>
    </div>

    <p>
      Copyright <%= new Date().getFullYear() %>.
      <a href="https://x.com/goon_nguyen">@goon_nguyen</a>
    </p>
  </div>
</div>
</file>

<file path="src/views/pages/payment-success.ejs">
<div class="pt-80 pb-60 px-10 md:px-0 w-full flex justify-center items-center">
  <div class="w-full h-auto text-center max-w-screen-sm">
    <h2 class="text-4xl">Your payment is successful!</h2>
    <h1 class="font-bold py-4 text-6xl">Congratulations!</h1>

    <div class="w-full border border-gray-100 dark:border-gray-700 rounded-2xl p-4 relative mb-10 shadow-xl dark:bg-gray-800">
      Check your balance in <a href="/profile" class="text-blue-400 hover:text-blue-500">Profile</a> page.
      <br />
      You can also re-activate your group ad in <a href="/dashboard/group-ads" class="text-blue-400 hover:text-blue-500">Group Ads</a> page.
    </div>

    <div class="flex gap-2 justify-center">
      <%- include("../common/button", {
      content: " <i class='ri-user-line mr-2'></i> Profile",
      href: "/profile",
      className: "bg-red-400 hover:bg-red-500"
    }) %>
      <%- include("../common/button", {
      content: " <i class='ri-home-line mr-2'></i> Home",
      href: "/",
    }) %>
    </div>
  </div>
</div>
</file>

<file path="src/views/pages/pricing.ejs">
<div class="px-6 py-20 flex flex-col items-center justify-center">
  <div class="w-full h-auto text-center max-w-screen-md">
    <h1 class="font-bold py-4 text-6xl mb-8">Pricing</h1>

    <!-- PRICING PLANS -->
    <div class="w-full border border-gray-200 dark:border-gray-700 rounded-2xl p-6 relative mb-8 shadow-lg dark:bg-gray-800 transition-all duration-300">
      <h3 class="font-bold text-xl mb-6 text-center dark:text-white flex items-center justify-center">
        <i class="ri-price-tag-3-line mr-2"></i>Available Plans
      </h3>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 w-full" id="plan-container">
        <% locals.plans.forEach((plan, index) => { %>
        <% const isRecommended = plan.name === "Starter"; %>
        <% 
          // Define unique styles for each plan to avoid CSS duplication
          let cardClasses, headerClasses, titleClasses, priceClasses, buttonClasses;
          
          if (isRecommended) {
            cardClasses = "shadow-md border-0 outline outline-2 outline-blue-500 dark:outline-blue-400";
            headerClasses = "bg-blue-500 dark:bg-blue-600";
            titleClasses = "text-white";
            buttonClasses = "bg-green-500 text-white font-medium cursor-default";
          } else {
            cardClasses = "hover:shadow-md hover:scale-[1.02] border-0 outline outline-1 outline-gray-200 dark:outline-gray-700";
            headerClasses = "bg-gray-100 dark:bg-gray-700";
            titleClasses = "text-gray-800 dark:text-white";
            buttonClasses = "bg-blue-500 hover:bg-blue-600 text-white font-medium transition-colors duration-300";
          }
        %>

        <div class="relative flex flex-col h-full overflow-hidden rounded-2xl transition-all duration-300 <%= cardClasses %>" data-id="<%- plan.id %>">

          <!-- Plan Header -->
          <div class="p-4 <%= headerClasses %> text-center relative">
            <h4 class="font-bold text-lg <%= titleClasses %>">
              <%- plan.name %>
            </h4>

            <!-- Plan Badge -->
            <% if(isRecommended) { %>
            <div class="absolute top-0 right-0 bg-blue-600 text-white text-xs font-bold px-3 py-1 rounded-bl-lg shadow-sm">
              <i class="ri-check-line mr-1"></i>Recommended
            </div>
            <% } %>
          </div>

          <!-- Plan Content -->
          <div class="p-6 text-center bg-white dark:bg-gray-800 flex-grow flex flex-col">
            <!-- Plan Price -->
            <div class="flex items-center justify-center">
              <span class="text-3xl font-bold dark:text-white"><%- plan.price / 100 %></span>
              <span class="text-sm font-normal ml-1 text-gray-700 dark:text-gray-300"><%- plan.currency %></span>
            </div>
            <div class="text-sm text-gray-500 dark:text-gray-400 mb-6">per month</div>

            <!-- Plan Description -->
            <div class="text-xs italic text-gray-600 dark:text-gray-300 mb-6 flex-grow">
              <%- plan.description %>
            </div>

            <!-- Benefits -->
            <div class="text-sm text-gray-600 dark:text-gray-300 mb-6 flex-grow">
              <ul>
                <% plan.benefits.forEach((benefit) => { %>
                <li><%- benefit %></li>
                <% }) %>
              </ul>
            </div>

            <!-- Action Button -->
            <a href="<%- plan.checkoutUrl %>" class="block w-full py-2 px-4 text-center rounded-lg <%= buttonClasses %>" target="_blank">
              <i class="ri-arrow-right-line mr-1"></i>Get Started
            </a>
          </div>
        </div>
        <% }); %>
      </div>
    </div>
    <!-- END PRICING PLANS -->
  </div>
</div>
</file>

<file path="src/views/pages/privacy.ejs">
<!-- Start of Selection -->
<div class="w-full flex justify-center items-center py-40">
  <div class="h-auto text-center px-6">
    <h1 class="h2 font-bold py-4 text-gray-900 dark:text-white">Privacy Policy</h1>

    <div class="border border-gray-100 dark:border-gray-700 rounded-2xl p-8 relative mb-4 shadow-xl prose !max-w-screen-lg dark:bg-gray-800">
      <div class="text-left">
        <p class="mb-4 text-gray-700 dark:text-gray-300"><em>Last updated: <%= new Date().toISOString().split('T')[0] %></em></p>

        <p class="mb-4 text-gray-700 dark:text-gray-300">At SaveDB.site, we are committed to protecting your privacy and ensuring the security of your personal information. This Privacy Policy outlines how we collect, use, disclose, and safeguard your data when you use our database backup and restoration service, including our website and services.</p>

        <h2 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">First Things First</h2>
        <p class="mb-4 text-gray-700 dark:text-gray-300">I want to make it clear that <strong>we don't store any of your sensitive data</strong> such as database credentials, cloud storage credentials, backups, or payment information. That's why we open source our source code. Feel free to check it out on <a href="https://github.com/duynguyen/savedb" target="_blank" class="text-blue-500 hover:underline">GitHub</a>.</p>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">1. Information We Collect</h3>
        <ul class="list-disc list-inside mb-4 text-gray-700 dark:text-gray-300">
          <li>Personal Information: When you create an account, we collect your name, email address, and contact information.</li>
          <li>Database Information: Details about your databases, backup preferences, and restoration history.</li>
          <li>Payment Information: Billing details, transaction history, and payment method information.</li>
          <li>Usage Data: Information on how you interact with our platform, including backup creation, restoration, and performance tracking.</li>
          <li>Device and Technical Information: IP address, browser type, device details, and platform usage analytics.</li>
        </ul>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">2. How We Use Your Information</h3>
        <ul class="list-disc list-inside mb-4 text-gray-700 dark:text-gray-300">
          <li>To facilitate database backup and restoration services</li>
          <li>To process payments and manage service subscriptions</li>
          <li>To provide performance analytics and service reporting</li>
          <li>To communicate service updates, platform notifications, and support-related information</li>
          <li>To improve and personalize the SaveDB.site platform</li>
          <li>To detect and prevent fraud or misuse of our service</li>
          <li>To generate aggregated, anonymized statistics about service performance</li>
        </ul>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">3. Data Sharing and Disclosure</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">We do not sell your personal information. We may share your data with:</p>
        <ul class="list-disc list-inside mb-4 text-gray-700 dark:text-gray-300">
          <li>Cloud storage providers for secure backup storage</li>
          <li>Service providers who assist in operating our platform, including:</li>
          <ul class="list-disc list-inside ml-4 mb-2 text-gray-700 dark:text-gray-300">
            <li>Payment processors</li>
            <li>Cloud hosting providers</li>
            <li>Analytics services</li>
            <li>Customer support tools</li>
          </ul>
          <li>Law enforcement or regulatory authorities if required by law</li>
          <li>In the event of a business transfer, merger, or acquisition</li>
        </ul>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">4. Data Security</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">We implement robust security measures to protect your data, including encryption, secure storage, access controls, and regular security audits. We are committed to maintaining the confidentiality and integrity of your information and backups.</p>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">5. Your Rights</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">You have the right to:</p>
        <ul class="list-disc list-inside mb-4 text-gray-700 dark:text-gray-300">
          <li>Access and receive a copy of your personal information</li>
          <li>Correct or update your account details</li>
          <li>Request deletion of your personal information</li>
          <li>Object to or restrict the processing of your data</li>
          <li>Export your data for portability</li>
          <li>Withdraw consent for marketing communications</li>
        </ul>
        <p class="mb-4 text-gray-700 dark:text-gray-300">To exercise these rights, please contact our support team.</p>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">6. Cookies and Tracking</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">We use cookies and similar tracking technologies to enhance user experience, analyze platform usage, and provide personalized services. You can manage cookie preferences through your browser settings.</p>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">7. Children's Privacy</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">Our service is designed for businesses and individuals over 18. We do not knowingly collect personal information from minors.</p>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">8. International Data Transfers</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">We may transfer and process your data in multiple countries. We ensure appropriate safeguards are in place to protect your data during international transfers.</p>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">9. Changes to This Policy</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">We may update this Privacy Policy periodically. We will notify you of significant changes and encourage you to review the policy regularly.</p>

        <h3 class="h3 font-semibold mb-2 text-gray-900 dark:text-white">10. Contact Us</h3>
        <p class="mb-4 text-gray-700 dark:text-gray-300">For any privacy-related questions or concerns, please contact us at:</p>
        <p class="mb-4 text-gray-700 dark:text-gray-300">Email: <a href="mailto:support@savedb.site" class="underline">support@savedb.site</a></p>
      </div>
    </div>

    <%- include("../common/button", {
      content: " <i class='ri-home-line mr-2'></i> Home",
      href: "/",
      className: "rts-btn mt-14 mx-auto"
    }) %>

  </div>
</div>
<!-- End of Selection -->
</file>

<file path="src/views/pages/workspace-select.ejs">
<div class="w-full flex justify-center items-center">
  <div class="h-auto text-center flex flex-col items-center">
    <%- include('../common/logo-verticle') %>

    <div class="flex flex-col items-center p-8 bg-white dark:bg-gray-800 rounded-lg shadow-lg gap-4 my-4">
      <h2 class="text-gray-800 dark:text-gray-200">Select Workspace</h2>
      <select id="workspaceSelect" class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200">
        <option value="">Choose a workspace</option>
        <% for (const workspace of workspaces) { %>
        <option value="<%- workspace.id %>"><%- workspace.name %></option>
        <% } %>
      </select>
      <div id="errorMessage" class="text-red-500 hidden"></div>
      <a href="/logout" class="inline-block py-2 px-6 no-underline bg-blue-400 hover:bg-blue-500 transition-all rounded-md text-white">
        Sign out
      </a>
      <%- include('../common/button', { href: '/', content: 'Home' }) %>
    </div>

  </div>
</div>

<script>
  document.getElementById('workspaceSelect').addEventListener('change', async function(e) {
    const workspaceId = e.target.value;
    if (!workspaceId) return;

    try {
      const response = await fetch('/api/v1/user/join-workspace', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          workspaceId
        }),
      });

      const data = await response.json();

      if (data.status === 1) {
        const urlParams = new URLSearchParams(window.location.search);
        const redirectUri = urlParams.get('redirect_uri') || '/profile';
        window.location.href = redirectUri;
      } else {
        const errorMessage = document.getElementById('errorMessage');
        errorMessage.textContent = data.message || 'Please try again later';
        errorMessage.classList.remove('hidden');
      }
    } catch (error) {
      console.error('Error:', error);
      const errorMessage = document.getElementById('errorMessage');
      errorMessage.textContent = 'An unexpected error occurred. Please try again later.';
      errorMessage.classList.remove('hidden');
    }
  });
</script>
</file>

<file path="src/views/templates/share-template-01-random.ejs">
<% const backgroundImageUrl = `/templates/share-bg-${String(Math.floor(Math.random() * 10) + 1).padStart(2, '0')}.png`; %>
<% const imageUrl = locals.image_url || "/images/screenshot-sample-02.png"; %>

<div id="viewport" class="w-[1200px] h-[630px] relative bg-white overflow-hidden">
  <!-- Background -->
  <div class="w-[1200px] h-[630px] left-0 top-0 absolute justify-center items-center inline-flex">
    <img class="w-[1200px] h-[630px]" src="<%= backgroundImageUrl %>" />
  </div>
  <!-- Image -->
  <div class="w-[1030px] h-[570px] left-1/2 -translate-x-1/2 bottom-[-2px] absolute rounded-tl-[30px] rounded-tr-[30px] shadow-2xl justify-center items-center inline-flex overflow-hidden z-50" style="background-image: url('<%= imageUrl %>'); background-size: cover; background-position: top center;">
  </div>
</div>
</file>

<file path="src/views/templates/share-template-01.ejs">
<% const backgroundImageUrl = locals.backgroundImageUrl || "/templates/share-bg-01.png"; %>
<% const imageUrl = locals.image_url || "/images/screenshot-sample-02.png"; %>
<div id="viewport" class="w-[1200px] h-[630px] relative bg-white overflow-hidden" style="background-image: url('<%= backgroundImageUrl %>'); background-size: cover; background-position: top center;">
  <!-- Image -->
  <div class="w-[1000px] h-[550px] left-1/2 -translate-x-1/2 bottom-[-2px] absolute rounded-tl-[30px] rounded-tr-[30px] shadow-2xl justify-center items-center inline-flex overflow-hidden z-50" style="background-image: url('<%= imageUrl %>'); background-size: cover; background-position: top center; z-index: auto;">
  </div>
</div>
</file>

<file path="src/views/master-dashboard.ejs">
<html lang="en">
<!-- HEAD -->

<head>
  <%- include('common/head', locals) %>
  <script>
    // Immediately invoked function to set the theme on page load
    (function() {
      function getInitialTheme() {
        const savedTheme = localStorage.getItem('theme');
        const systemDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
        return savedTheme === 'dark' || (!savedTheme && systemDarkMode) ? 'dark' : 'light';
      }

      const theme = getInitialTheme();
      document.documentElement.setAttribute('data-mode', theme);
    })();
  </script>
</head>

<!-- BODY -->

<body class="w-full ">
  <!-- HEADER -->
  <% if (typeof locals.headerEnabled === 'undefined' || locals.headerEnabled) { %>
  <%- include('common/header-dashboard', locals) %>
  <% } %>

  <!-- PAGE -->
  <% if (typeof page !== 'undefined') { %>
  <%- include(page, locals); %>
  <% } %>

  <!-- FOOTER -->
  <% if (typeof locals.footerEnabled === 'undefined' || locals.footerEnabled) { %>
  <%- include('common/footer', locals) %>
  <% } %>

  <div id="anywhere-home" class="">
  </div>

  <!-- pre loader start -->
  <div class="loader-wrapper">
    <div class="loader">
    </div>
    <div class="loader-section section-left"></div>
    <div class="loader-section section-right"></div>
  </div>
  <!-- pre loader end -->

  <!-- THEME MODE SWITCHER -->
  <div class="rts-switcher rts-theme-mode">
    <div class="rts-darkmode">
      <a id="rts-data-toggle" class="rts-dark-light">
        <i class="rts-go-dark fal fa-moon"></i>
        <i class="rts-go-light fa-light fa-sun-bright"></i>
      </a>
    </div>
  </div>
  <!-- THEME MODE SWITCHER END -->

  <!-- progress area start -->
  <div class="progress-wrap">
    <svg class="progress-circle svg-content" width="100%" height="100%" viewBox="-1 -1 102 102">
      <path d="M50,1 a49,49 0 0,1 0,98 a49,49 0 0,1 0,-98" style="transition: stroke-dashoffset 10ms linear 0s; stroke-dasharray: 307.919, 307.919; stroke-dashoffset: 307.919;"></path>
    </svg>
  </div>
  <!-- progress area end -->

  <!-- Scripts -->

  <!-- Day.js -->
  <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
  <!-- marked.js -->
  <script src="/js/marked.min.js"></script>
  <!-- highlight.js -->
  <script src="/vendor/highlight/highlight.min.js"></script>
  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <!-- Slick -->
  <link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css" />
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick-theme.css" />
  <script type="text/javascript" src="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js"></script>
  <!-- Tippy.js -->
  <script src="https://unpkg.com/@popperjs/core@2"></script>
  <script src="https://unpkg.com/tippy.js@6"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Main JS -->
  <script defer src="/assets/js/plugins/bootstrap.min.js"></script>
  <script defer src="/assets/js/plugins/metismenu.js"></script>
  <script defer src="/assets/js/vendor/jqueryui.js"></script>
  <script defer src="/assets/js/vendor/waypoint.js"></script>
  <script defer src="/assets/js/plugins/swiper.js"></script>
  <script defer src="/assets/js/plugins/theia-sticky-sidebar.min.js"></script>
  <script defer src="/assets/js/plugins/gsap.min.js"></script>
  <script defer src="/assets/js/plugins/scrolltigger.js"></script>
  <script defer src="/assets/js/vendor/split-text.js"></script>
  <script defer src="/assets/js/vendor/split-type.js"></script>
  <script defer src="/assets/js/vendor/waw.js"></script>
  <script defer src="/assets/js/plugins/counter-up.js"></script>
  <script defer src="/assets/js/plugins/magnific-popup.js"></script>
  <!-- contact form js -->
  <script defer src="/assets/js/plugins/contact-form.js"></script>
  <script defer src="/assets/js/plugins/drawers.js"></script>
  <script defer src="/assets/js/plugins/modals.js"></script>
  <script defer src="/assets/js/main.js"></script>
  <script defer src="/assets/js/auth.js"></script>
  <script defer src="/assets/js/group-ads.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      tippy('.tippy', {
        animation: 'fade',
        duration: 300,
        interactive: true,
      });
    });
  </script>
</body>

</html>
</file>

<file path="src/views/master-template.ejs">
<html lang="en" class="h-full">
<!-- HEAD -->

<head>
  <%- include('common/head', locals) %>
</head>

<!-- BODY -->

<body class="h-full w-full">
  <!-- CONTENT -->
  <% if (typeof template !== 'undefined') { %>
  <%- include(template); %>
  <% } %>
</body>

</html>
</file>

<file path=".continueignore">
.git/
.next/
build/
node_modules/
</file>

<file path=".cursorrules">
## Project Development Information

Main domain: SaveDB.site

### Tech stack
- Node.js
- Express.js
- Prisma (PostgreSQL)
- EJS
- TailwindCSS
- Commitlint
- Swagger
- Docker
- Docker Compose

### When working with EJS
always use icons from https://remixicon.com/
always use tailwindcss for styling

### When working with Tailwind or CSS
always implement responsive layout with mobile-first approach
always implement dark mode

### For Express.js project
always import prisma client with: `import { prisma } from "@/lib/db";`
always use async/await for better readability and performance
always use `next()` for error handling of all routers
always use try-catch for fallback error handling
always use zod for validation
always generate swagger docs for all APIs
always use `bearerAuth` and `ApiKeyAuth` for swagger security

## About The Project

### Description

SaveDB.site is a tool that provides API to backup databases and upload to cloud storages.

### Support databases
- PostgreSQL

### Support cloud storages
- AWS S3
- Cloudflare R2

### Slogans
1. "Just save it somewhere and hope we will never need it."

### Workflow:
- A user inputs a database connection url
- The tool will backup the database
- The tool will upload the backup to cloud storage

### Privacy Policy
- We don't store any data
- We don't collect any data
- We don't use any data
- We made this as simple as possible: connect to a database, backup it, upload it to cloud storage. That's it.

### Support
- If you have any questions or feedback, please contact us at [SaveDB.site](https://savedb.site).
- If you have any issues or bugs, please report them to us.
- If you have any suggestions or feature requests, please submit them to us.
</file>

<file path=".dockerignore">
.git/
.gitignore
.next/
.dockerignore
Dockerfile
docker-compose.yml
node_modules/
optimizer/
local_certificate/
.env.local
out/
gcloud-service-account.json
# package-lock.json
# pnpm-lock.yaml

public/screenshots
.env
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# typpescript
tsconfig.tsbuildinfo

# dependencies
node_modules
node_modules/
optimizer/node_modules/
optimizer/yarn.lock
/.pnp
.pnp.js
/mocks

# testing
/coverage

# next.js
/out/
out/
.next
.next/

# production
build
/build

# misc
.DS_Store

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
yarn.lock
.yarn
.pnp.cjs
.pnp.loader.mjs
pnpm-lock.yaml

# local env files
.env
.env.dev
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Storage
storage/
!storage/exchange-rate.json
public/uploads
public/screenshots
</file>

<file path=".prettierignore">
# Ignore artifacts:
build
coverage

.next
node_modules
.yarn
.out
.turbo
.temp

public
</file>

<file path=".prettierrc.json">
{
  "trailingComma": "es5",
  "tabWidth": 2,
  "useTabs": false,
  "semi": true,
  "singleQuote": false,
  "arrowParens": "always",
  "endOfLine": "lf",
  "printWidth": 100,
  "bracketSpacing": true,
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "options": {
        "parser": "typescript"
      }
    }
  ]
}
</file>

<file path="commitlint.config.cjs">

</file>

<file path="docker-compose.postgresql.yaml">
version: "3"
services:
  postgresql:
    container_name: postgresql
    image: "bitnami/postgresql:latest"
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRESQL_PASSWORD: postgresql
    volumes:
      - /bitnami/postgresql
    logging:
      options:
        max-size: 1g
</file>

<file path="docker-compose.yaml">
services:
  savedb:
    container_name: savedb
    restart: always
    build:
      context: .
    ports:
      - "3000:3000"
    env_file:
      - .env
</file>

<file path="Dockerfile">
# Use the official Node.js image
FROM node:20.15.1
WORKDIR /usr/app

# Install dependencies, Playwright, and PostgreSQL tools
RUN apt-get update && apt-get install -y python3 \
  libgstreamer1.0-0 libgstreamer-plugins-base1.0-0 libgstreamer-plugins-bad1.0-0 \
  libwoff1 libopus0 libwebp7 libwebpdemux2 libenchant-2-2 libgudev-1.0-0 \
  libsecret-1-0 libhyphen0 libgdk-pixbuf2.0-0 libegl1 libnotify4 libxslt1.1 \
  libevent-2.1-7 libgles2 libvpx7 libxcomposite1 libatk1.0-0 libatk-bridge2.0-0 \
  libepoxy0 libgtk-3-0 libharfbuzz-icu0 libmanette-0.2-0 libxkbcommon0 libflite1 \
  libx264-164 gstreamer1.0-libav gstreamer1.0-plugins-bad \
  gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
  firefox-esr postgresql-client

# PNPM
RUN wget -qO /bin/pnpm "https://github.com/pnpm/pnpm/releases/latest/download/pnpm-linuxstatic-x64" && chmod +x /bin/pnpm

# Bun
RUN npm install -g bun

# Copy package.json and prisma files
COPY ./package.json ./
COPY prisma ./prisma

# Install dependencies
RUN bun install

# Install Playwright with PNPM
# RUN pnpm exec playwright install --with-deps
RUN bunx playwright install --with-deps

# Install Playwright with YARN
# RUN yarn playwright install
# RUN yarn playwright install-deps
# RUN yarn playwright install --with-deps

# Copy only necessary files
COPY src ./src
COPY bin ./bin
COPY public ./public
COPY package.json ./
COPY tsconfig.json ./

# Generate Prisma schema
RUN bun run db

# Expose port and start application
EXPOSE 3000/tcp

# Use "npm" to avoid unexpected issues with "bun"
CMD ["npm", "run", "start"]
</file>

<file path="eslint.config.js">

</file>

<file path="lint-staged.config.cjs">

</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    // Enable latest features
    "lib": ["dom", "dom.iterable", "esnext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,

    // Some stricter flags
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noPropertyAccessFromIndexSignature": false,

    // Path alias
    "baseUrl": ".",
    "paths": {
      "react": ["./node_modules/@types/react"],
      "@/*": ["./src/*"],
      "@/public/*": ["./public/*"]
    }
  },
  "exclude": [
    // ... other exclusions ...
    "commitlint.config.cjs",
    "lint-staged.config.cjs",
    "tailwind.config.cjs"
  ]
}
</file>

<file path="prisma/schema.prisma">
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

model Key {
    id             String  @id @unique
    hashedPassword String?
    userId         String
    activeExpires  BigInt
    idleExpires    BigInt
    user           User    @relation(references: [id], fields: [userId], onDelete: Cascade)

    @@index([userId])
}

// Defines a session for user authentication, related to a specific user
model Session {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
    createdAt DateTime @default(now())
    expiresAt DateTime
}

// Represents an account linked to a user, unique per provider-account ID combination
model Account {
    id                String @id @default(uuid())
    providerAccountId String @unique
    provider          String

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt

    userId String
    user   User?  @relation(fields: [userId], references: [id])

    @@index([userId])
}

// User model capturing basic user information and relationships with other entities
model User {
    id         String  @id @default(uuid())
    name       String
    slug       String  @unique
    password   String?
    email      String? @unique
    image      String?
    validEmail Boolean @default(false)
    isPremium  Boolean @default(false)
    balance    Float   @default(0)

    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt

    activeWorkspaceId String?
    activeWorkspace   Workspace? @relation(fields: [activeWorkspaceId], references: [id], name: "activeWorkspace")

    key                   Key[]
    sessions              Session[]
    accounts              Account[]
    userRoles             UserRole[]
    metaFile              MetaFile[]
    emailVerificationCode EmailVerificationCode[]
    workspaces            Workspace[]             @relation("creator")
    workspace             Workspace[]
    workspaceUserRole     WorkspaceUserRole[]
    passwordResetToken    PasswordResetToken[]
    apiKeys               ApiKey[]
    userPlans             UserPlan[]
    workspacePlans        WorkspacePlan[]
    orders                Order[]
    cashTransactions      CashTransaction[]
    userBalances          UserBalance[]
    payments              Payment[]
}

model PasswordResetToken {
    id        String @id @default(uuid())
    userId    String
    tokenHash String

    createdAt DateTime @default(now())
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id])
}

// Manages email verification codes for users
model EmailVerificationCode {
    id     String @id @default(uuid())
    userId String
    code   String

    createdAt DateTime @default(now())
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id])
}

// Manages email verification tokens for users
model EmailVerificationToken {
    id        String @id @default(uuid())
    tokenHash String
    email     String

    createdAt DateTime @default(now())
    expiresAt DateTime
}

// Defines roles within the system
model Role {
    id              String           @id @default(uuid())
    name            String           @unique
    userRoles       UserRole[]
    rolePermissions RolePermission[]
}

// Intermediary table for many-to-many relationship between users and roles
model UserRole {
    id     String @id @default(uuid())
    userId String
    roleId String
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
}

// Defines permissions within the system
model Permission {
    id              String           @id @default(uuid())
    name            String           @unique
    rolePermissions RolePermission[]
}

// Intermediary table for many-to-many relationship between roles and permissions
model RolePermission {
    id           String     @id @default(uuid())
    roleId       String
    permissionId String
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@unique([roleId, permissionId])
}

// Manages files or media associated with a user, including metadata
model MetaFile {
    id         String  @id @default(uuid())
    mimetype   String?
    url        String?
    blurBase64 String?
    width      Int?
    height     Int?
    approved   Boolean @default(true)

    createdAt DateTime? @default(now())

    userId String
    user   User   @relation(fields: [userId], references: [id])
}

// Represents a workspace or project area within the system
model Workspace {
    id          String  @id @default(uuid())
    name        String
    slug        String  @unique
    description String?
    isPublic    Boolean @default(false)
    creatorId   String
    creator     User    @relation(fields: [creatorId], references: [id], name: "creator")

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    workspaceRoles       WorkspaceRole[]
    workspaceUserRoles   WorkspaceUserRole[]
    WorkspacePlan        WorkspacePlan[]
    User                 User[]
    activeWorkspaceUsers User[]              @relation("activeWorkspace")
    apiKeys              ApiKey[]

    @@unique([id, slug])
    @@index([creatorId])
}

// Defines roles specific to a workspace
model WorkspaceRole {
    id          String @id @default(uuid())
    name        String
    workspaceId String

    workspace               Workspace                 @relation(fields: [workspaceId], references: [id])
    workspaceUserRoles      WorkspaceUserRole[]
    workspaceRolePermission WorkspaceRolePermission[]
}

// Intermediary table for many-to-many relationship between workspace users and roles
model WorkspaceUserRole {
    id              String        @id @default(uuid())
    workspaceId     String
    workspace       Workspace     @relation(fields: [workspaceId], references: [id])
    userId          String
    user            User          @relation(fields: [userId], references: [id])
    workspaceRoleId String
    workspaceRole   WorkspaceRole @relation(fields: [workspaceRoleId], references: [id])
}

// Defines permissions within a workspace context
model WorkspacePermission {
    id                      String                    @id @default(uuid())
    name                    String                    @unique
    workspaceRolePermission WorkspaceRolePermission[]
}

// Intermediary table for many-to-many relationship between workspace roles and permissions
model WorkspaceRolePermission {
    id String @id @default(uuid())

    workspaceRole         WorkspaceRole       @relation(fields: [workspaceRoleId], references: [id])
    workspaceRoleId       String
    workspacePermission   WorkspacePermission @relation(fields: [workspacePermissionId], references: [id])
    workspacePermissionId String
}

model WorkspacePlan {
    id               String     @id @default(uuid())
    status           PlanStatus @default(ACTIVE)
    requestPerMinute Int
    requestPerMonth  Int
    polarId          String?

    userId      String?
    user        User?     @relation(fields: [userId], references: [id])
    planId      String
    plan        Plan      @relation(fields: [planId], references: [id])
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    expiresAt DateTime?
}

model Proxy {
    id String @id @default(uuid())

    url  String
    data Json?

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model ApiKey {
    id          String     @id @default(uuid())
    name        String
    key         String     @unique
    userId      String
    user        User       @relation(fields: [userId], references: [id])
    workspaceId String?
    workspace   Workspace? @relation(fields: [workspaceId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    expiresAt DateTime?
}

enum TrackingCodeType {
    GA
    GTM
    FACEBOOK_PIXEL
}

enum OrderStatus {
    UNPAID
    PAID
    CANCELLED
}

enum PaymentStatus {
    PAID
    CANCELLED
    FREE
    PENDING_VERIFICATION
    REFUNDED
    EXPIRED
}

enum PaymentMethod {
    CREDIT_CARD
    MOMO
    BANK_TRANSFER
    LEMON_SQUEEZY
    POLAR
}

enum TransactionType {
    DEPOSIT
    REFUND
    PAYOUT
}

enum WithdrawalStatus {
    PENDING
    COMPLETED
    FAILED
}

enum CashType {
    CREDITS
}

enum PlanType {
    FREE
    MONTHLY
    YEARLY
    ONE_TIME
    ADDITION
}

enum UserPlanStatus {
    ACTIVE
    INACTIVE
}

enum UserPlanRecurring {
    MONTHLY
    YEARLY
    ONE_TIME
}

model Order {
    id                 String      @id @default(uuid())
    total              Float
    currency           Currency    @default(VND)
    status             OrderStatus @default(UNPAID)
    polarCheckoutId    String?
    polarProductId     String?
    polarPriceId       String?
    polarYearlyPriceId String?
    userId             String
    createdAt          DateTime    @default(now())
    updatedAt          DateTime?   @updatedAt
    expiresAt          DateTime?
    user               User        @relation(fields: [userId], references: [id])
    payments           Payment[]
}

model Payment {
    id                 String        @id @default(uuid())
    userId             String
    amount             Float
    currency           Currency      @default(VND)
    status             PaymentStatus @default(PENDING_VERIFICATION)
    method             PaymentMethod
    transactionId      String?
    transactionDetails Json?
    createdAt          DateTime      @default(now())
    updatedAt          DateTime?     @updatedAt
    expiresAt          DateTime?
    orderId            String
    order              Order         @relation(fields: [orderId], references: [id])
    user               User          @relation(fields: [userId], references: [id])
}

model CashTransaction {
    id              String          @id @default(uuid())
    userId          String
    cashType        CashType        @default(CREDITS)
    amount          Float
    transactionType TransactionType
    description     String?
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    user            User            @relation(fields: [userId], references: [id])
}

model UserBalance {
    id        String    @id @default(uuid())
    cashType  CashType  @default(CREDITS)
    balance   Float     @default(0)
    userId    String
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    user      User      @relation(fields: [userId], references: [id])

    @@unique([userId, cashType])
}

enum Currency {
    USD
    VND
    // ...
}

enum PlanInterval {
    MONTH
    YEAR
}

enum PlanStatus {
    ACTIVE
    ARCHIVED
}

model Plan {
    id                   String          @id @default(uuid())
    slug                 String          @unique
    status               PlanStatus      @default(ACTIVE)
    name                 String
    description          String?
    type                 PlanType        @default(FREE)
    benefits             String[]
    price                Int
    currency             Currency
    checkoutUrl          String?
    polarProductId       String?
    polarPriceId         String?
    polarYearlyPriceId   String?
    // plan info
    maxRequestsPerMinute Int             @default(0)
    maxRequestsPerMonth  Int             @default(0)
    userPlans            UserPlan[]
    workspacePlans       WorkspacePlan[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserPlan {
    id                   String            @id @default(uuid())
    status               UserPlanStatus    @default(ACTIVE)
    userId               String
    planId               String?
    polarSubscriptionId  String?
    recurring            UserPlanRecurring @default(MONTHLY)
    maxRequestsPerMinute Int               @default(0)
    maxRequestsPerMonth  Int               @default(0)
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @updatedAt
    Plan                 Plan?             @relation(fields: [planId], references: [id])
    user                 User              @relation(fields: [userId], references: [id])
}

// ------------------ APP SPECIFIC SCHEMAS ------------------
</file>

<file path="src/config/swagger.ts">
import pkg from "package.json";
import type { Options } from "swagger-jsdoc";
⋮----
import { env } from "@/env";
⋮----
export const swaggerOptions = (options?: Options) => (
</file>

<file path="src/lib/ai/models.ts">
import axios from "axios";
import axiosRetry from "axios-retry";
import { toFloat } from "diginext-utils/dist/object";
import { z } from "zod";
⋮----
import { redis } from "@/lib/redis";
⋮----
import { sortToFirst } from "../utils/array";
⋮----
export type AIModel = z.infer<typeof AiModelSchema>;
⋮----
export type AIProvider = (typeof aiProviders)[number];
⋮----
export async function fetchListAIModels(options:
⋮----
// get "aiModels" & "aiVisionModels" from redis (if redis is available)
⋮----
// const cacheFilePath = path.resolve(STORAGE_PATH, 'models.json');
⋮----
/**
     * Need to filter out some models, since Discord only support max. 25 choices
     * - Source: https://openrouter.ai/api/v1/models
     */
⋮----
// sort models
⋮----
// sort a fav model on top! (default)
⋮----
// Vision AI models
⋮----
// item.id == 'anthropic/claude-3-haiku:beta'
// [NEW] All Claude 3 models have vision ability
⋮----
let visions = sortToFirst(_visionList.sort(), "id", "openai/"); // <-- sort OpenAI's models on top! (default)
if (visions.length > 24) visions.splice(24); // <-- Keep max amount of models is 20
⋮----
// up-sale
⋮----
// assign to global vars
⋮----
// print out
⋮----
// add to redis (if redis is available) and set expire time to 24 hours
⋮----
return models as AIModel[]; // Trả về danh sách mô hình AI
⋮----
return []; // Trả về mảng rỗng trong trường hợp có lỗi
</file>

<file path="src/lib/email/elastic-email/index.ts">
// @ts-ignore
⋮----
import { env } from "@/env";
import { isValidEmail } from "@/lib/utils/email";
⋮----
export interface IElasticSend {
  subject: string;
  content: string;
  from?: string;
  to: string;
}
⋮----
export default async function elasticSend({
  content,
  to,
  subject,
  from = env.ELASTIC_EMAIL_FROM,
}: IElasticSend)
⋮----
// Check email format
⋮----
// Set up the email data.
⋮----
// eslint-disable-next-line no-unused-vars
</file>

<file path="src/lib/google/youtube-search.ts">
import { youtube_v3 } from "@googleapis/youtube";
⋮----
import { env } from "@/env";
⋮----
import type { YoutubeSearchParams, YoutubeSearchResponse } from "./youtube.schema";
import { YoutubeSearchParamsSchema } from "./youtube.schema";
⋮----
export async function youtubeSearch(params: YoutubeSearchParams): Promise<YoutubeSearchResponse>
⋮----
// Validate input parameters
</file>

<file path="src/lib/google/youtube.schema.ts">
import { z } from "zod";
⋮----
"date", // Sort by newest first
"viewCount", // Sort by most views
"rating", // Sort by highest rating
"relevance", // Sort by relevance (default)
⋮----
"short", // Under 4 minutes
"medium", // Between 4-20 minutes
"long", // Over 20 minutes
"any", // Any duration (default)
⋮----
export type YoutubeSearchParams = z.infer<typeof YoutubeSearchParamsSchema>;
export type YoutubeVideo = z.infer<typeof YoutubeVideoSchema>;
export type YoutubeSearchResponse = z.infer<typeof YoutubeSearchResponseSchema>;
</file>

<file path="src/lib/db.ts">
import { PrismaClient } from "@prisma/client";
import pg from "pg";
⋮----
import { env } from "@/env";
⋮----
// Configure the connection pool with better defaults
⋮----
statement_timeout: 30000, // Add statement timeout
query_timeout: 60000, // Add query timeout
⋮----
// Add connection initialization check
const initializePool = async () =>
⋮----
process.exit(1); // Exit if we can't establish initial connection
⋮----
// Initialize the pool
⋮----
// Create Prisma client with better timeout handling
const prismaClientSingleton = () =>
⋮----
// Add transaction timeout middleware
const withTimeout = async (promise: Promise<any>, timeoutMs: number = 10000) =>
⋮----
// Export wrapped Prisma client with timeout
⋮----
// Cleanup on application shutdown
</file>

<file path="src/modules/plan/plans.ts">
import type { PlanType } from "@prisma/client";
⋮----
import { env } from "@/env";
import { prisma } from "@/lib/db";
import { getPolarProducts } from "@/lib/polar";
import { makeSlug } from "@/lib/utils";
⋮----
export type LocalPlan = {
  name: string;
  description: string;
  type: PlanType;
  price: number;
  maxRequestPerMinute: number;
  maxRequestPerMonth: number;
  benefits: Benefit[];
  polarProductId: string;
  polarPriceId: string;
  checkoutUrl?: string;
};
⋮----
export type Benefit = (typeof benefits)[number];
⋮----
//
⋮----
export async function createInitialPlans()
⋮----
// console.log(plans);
⋮----
export async function syncPlans()
⋮----
// sync checkoutUrl
⋮----
// check product.price change -> update plan.price
⋮----
// sync price
⋮----
export async function getPlanById(id: string)
⋮----
export async function getPlanByPolarProductId(polarProductId: string)
</file>

<file path="src/routes/api/api-bing.ts">
import express from "express";
⋮----
import { validateSession } from "@/lib/auth";
import { bingWebSearch } from "@/lib/bing";
import { apiKeyAuth } from "@/middlewares/api_key_auth";
⋮----
// Bing Search API Router
// Tag: BingSearch
</file>

<file path="src/routes/pages/pricing.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
⋮----
import AppConfig from "@/config/AppConfig";
import { clientEnv } from "@/env";
import { validateSession, verifyRequest } from "@/lib/auth";
import { getAvailablePricingPlans } from "@/modules/payment";
import { getUser, maskUser } from "@/modules/user";
⋮----
import { pageRouter } from "./router";
</file>

<file path="src/routes/pages/profile.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
⋮----
import AppConfig from "@/config/AppConfig";
import { clientEnv } from "@/env";
import { validateSession, verifyRequest } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { getAvailablePricingPlans, getUserPlanByUserId } from "@/modules/payment";
import { getUser, maskUser } from "@/modules/user";
⋮----
import { pageRouter } from "./router";
⋮----
// Fetch all API keys for the user
</file>

<file path="src/routes/webhooks/polar-webhook.ts">
import chalk from "chalk";
import express from "express";
import { z } from "zod";
⋮----
import { env } from "@/env";
import {
  cancelAllPolarSubscriptions,
  cancelAllUserPlansByPolarSubscriptionIds,
  cancelUserPlanByPolarSubscriptionId,
  createPaymentAndOrder,
  subscriptionActive,
  subscriptionCancel,
} from "@/modules/payment";
import { addCreditsToUserBalance } from "@/modules/user-balance";
⋮----
import { Webhook, WebhookVerificationError } from "./standard-webhook";
⋮----
// make sure this route receive raw body
⋮----
// console.log(`req.body :>>`, req.body);
// console.log(`req.headers :>>`, req.headers);
⋮----
// console.log("Parsed headers:", headers);
⋮----
// console.log("Webhook instance created with secret:", env.POLAR_SECRET);
⋮----
// console.log("Payload string:", payloadString);
⋮----
// Handle the event
⋮----
// Checkout has been created
⋮----
// Checkout has been updated - this will be triggered when checkout status goes from confirmed -> succeeded
⋮----
// only if this checkout is for a one-time product -> add credits to user balance
⋮----
// add credits to user balance
⋮----
// notify user add credits
// await notifyUserAddCredits(order);
⋮----
// cancel any existing user plan
⋮----
// Subscription has been created
⋮----
// A catch-all case to handle all subscription webhook events
⋮----
// Subscription has been activated
⋮----
// Subscription has been revoked/peroid has ended with no renewal
⋮----
// Subscription has been explicitly canceled by the user
</file>

<file path="src/routes/webhooks/standard-webhook.ts">
import crypto from "crypto";
⋮----
const WEBHOOK_TOLERANCE_IN_SECONDS = 5 * 60; // 5 minutes
⋮----
// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.
// https://github.com/denoland/deno_std/blob/main/crypto/timing_safe_equal.ts
⋮----
/** Make an assertion, if not `true`, then throw. */
function assert(expr: unknown, msg = ""): asserts expr
⋮----
/** Compare two array buffers or data views in a way that timing based attacks
 * cannot gain information about the platform. */
export function timingSafeEqual(
  a: ArrayBufferView | ArrayBufferLike | DataView,
  b: ArrayBufferView | ArrayBufferLike | DataView
): boolean
⋮----
class ExtendableError extends Error
⋮----
constructor(message: any)
⋮----
export class WebhookVerificationError extends ExtendableError
⋮----
constructor(message: string)
⋮----
export interface WebhookUnbrandedRequiredHeaders {
  "webhook-id": string;
  "webhook-timestamp": string;
  "webhook-signature": string;
}
⋮----
export interface WebhookOptions {
  format?: "raw";
}
⋮----
export class Webhook
⋮----
constructor(secret: string, options?: WebhookOptions)
⋮----
// if (!secret) {
//   throw new Error("Secret can't be empty.");
// }
// if (options?.format === "raw") {
//   if (secret instanceof Uint8Array) {
//     this.key = secret;
//   } else {
//     this.key = Uint8Array.from(secret, (c) => c.charCodeAt(0));
//   }
// } else {
//   if (typeof secret !== "string") {
//     throw new Error("Expected secret to be of type string");
//   }
//   if (secret.startsWith(Webhook.prefix)) {
//     secret = secret.substring(Webhook.prefix.length);
//   }
//   this.key = base64.decode(secret);
// }
⋮----
public verify(
    payload: string | Buffer,
    headers_: WebhookUnbrandedRequiredHeaders | Record<string, string>
): unknown
⋮----
// console.log("Verifying with timestamp:", timestamp.toISOString());
⋮----
// console.log("Computed signature in verify:", computedSignature);
// console.log("Received signature:", msgSignature);
⋮----
/**
     * StandardWebhook:
     */
// const computedSignature = this.sign(msgId, timestamp, payload);
// const expectedSignature = computedSignature.split(",")[1];
// const passedSignatures = msgSignature.split(" ");
// const encoder = new globalThis.TextEncoder();
// for (const versionedSignature of passedSignatures) {
//   const [version, signature] = versionedSignature.split(",");
//   if (version !== "v1") {
//     continue;
//   }
//   if (timingSafeEqual(encoder.encode(signature), encoder.encode(expectedSignature))) {
//     return JSON.parse(payload.toString());
//   }
// }
// throw new WebhookVerificationError("No matching signature found");
⋮----
public sign(msgId: string, timestamp: Date, payload: string | Buffer): string
⋮----
// Do nothing, already a string
⋮----
/**
     * StandardWebhook:
     * USING "fast-sha256"
     */
// const encoder = new TextEncoder();
// const timestampNumber = Math.floor(timestamp.getTime() / 1000);
// const toSign = encoder.encode(`${msgId}.${timestampNumber}.${payload}`);
// const expectedSignature = base64.encode(sha256.hmac(this.key, toSign));
// return `v1,${expectedSignature}`;
⋮----
/**
     * USING "crypto"
     */
⋮----
private verifyTimestamp(timestampHeader: string): Date
</file>

<file path="src/styles/global.css">
@tailwind base;
⋮----
@layer base {
⋮----
* {
⋮----
@apply font-body;
⋮----
h1,
⋮----
@apply font-heading;
⋮----
h1 {
⋮----
@apply text-4xl;
⋮----
h2 {
⋮----
@apply text-3xl;
⋮----
h3 {
⋮----
@apply text-2xl;
⋮----
h4 {
⋮----
@apply text-xl;
⋮----
h5 {
⋮----
@apply text-lg;
⋮----
a {
p {
/* Transition for all links and buttons */
a,
input {
⋮----
@apply outline-none focus:ring-0 p-2 dark:bg-gray-700 dark:text-white; /* Added dark mode support */
⋮----
input::placeholder {
⋮----
@apply dark:text-gray-400; /* Added dark mode support */
⋮----
@tailwind components;
@tailwind utilities;
⋮----
.absolute-center {
.fixed-center {
⋮----
.main-nav-area ul li.active a,
⋮----
@apply !text-brand-primary;
⋮----
.slick-dots li button:before {
⋮----
.shape-area {
⋮----
@apply pointer-events-none;
⋮----
.container {
⋮----
.group-ad-item {
⋮----
.group-ad-category {
.group-ad-category.active {
</file>

<file path="src/views/common/footer.ejs">
<!-- rts footer area start -->
<div class="rts-footer-area-one py-8 bg-white dark:bg-gray-900">
  <div class="container mx-auto px-4">
    <div class="grid md:grid-cols-4 gap-8 pt-10 border-t border-gray-200 dark:border-gray-700">
      <!-- col 1 -->
      <div class="col-span-1">
        <div className="single-footer-wized-one">
          <h6 className="title font-bold text-lg mb-4 text-gray-800 dark:text-gray-200">Home</h6>
          <ul className="space-y-2">
            <li><a href="/api-docs" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">API Docs</a></li>
            <li><a href="/instructions" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">Instructions</a></li>
          </ul>
        </div>
      </div>
      <div class="col-span-1">
        <div className="single-footer-wized-one">
          <h6 className="title font-bold text-lg mb-4 text-gray-800 dark:text-gray-200">Other products</h6>
          <ul className="space-y-2">
            <li><a href="https://digicord.site" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">DigiCord AI</a></li>
            <li><a href="https://readtube.me" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">ReadTube</a></li>
            <li><a href="https://zii.one" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">ZII.ONE</a></li>
            <li><a href="https://indieboosting.com" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">IndieBoosting</a></li>
            <li><a href="https://dxup.dev" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">DXUP Platform</a></li>
          </ul>
        </div>
      </div>
      <div class="col-span-1">
        <div className="single-footer-wized-one">
          <h6 className="title font-bold text-lg mb-4 text-gray-800 dark:text-gray-200">&nbsp;</h6>
          <ul className="space-y-2">
            <li><a href="https://boosttogether.com" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">BoostTogether</a></li>
            <li><a href="https://vidcap.xyz" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">VidCap</a></li>
            <li><a href="https://getviral.now" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">GetViral</a></li>
            <li><a href="https://topranking.ai" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">TopRanking</a></li>
            <li><a href="https://savedb.site" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">SaveDB</a></li>
          </ul>
          <!-- <h6 className="title font-bold text-lg mb-4 text-gray-800 dark:text-gray-200">Learn & Support</h6>
          <ul className="space-y-2">
            <li><a href="/faq" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">FAQ</a></li>
            <li><a href="/best-practices" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">Best Practices</a></li>
            <li><a href="/refund-policy" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">Refund Policy</a></li>
            <li><a href="https://discord.gg/boosttogether" target="_blank" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">Discord Community</a></li>
          </ul> -->
        </div>
      </div>
      <div class="col-span-1">
        <div className="footer-input-main-wrapper-one">
          <div className="single-footer-wized-one">
            <!-- <h6 className="title font-bold text-lg mb-4 text-gray-800 dark:text-gray-200">Newsletter</h6>
            <form action="#" className="relative">
              <input type="email" placeholder="Email address.." required className="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:text-gray-200" />
              <button className="absolute right-0 top-0 mt-1 mr-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-1 rounded-md transition duration-300 dark:bg-blue-600 dark:hover:bg-blue-700">
                Subscribe
              </button>
            </form> -->
          </div>
        </div>
      </div>
    </div>
    <div class="flex flex-row justify-start items-center gap-4 mt-10 border-t border-gray-200 dark:border-gray-700 pt-6">
      <ul class="social-area-one flex space-x-4">
        <li><a href="https://fb.com/mrgoonie" target="_blank" class="text-gray-600 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400"><i class="ri-facebook-circle-fill text-2xl"></i></a></li>
        <li><a href="https://x.com/goon_nguyen" target="_blank" class="text-gray-600 hover:text-black dark:text-gray-300 dark:hover:text-white"><i class="ri-twitter-x-line text-2xl"></i></a></li>
      </ul>
      <p class="text-gray-600 dark:text-gray-400 m-0 p-0">
        Made with ❤️ by <a href="https://x.com/goon_nguyen" target="_blank" className="text-blue-500 hover:underline font-bold">@goon_nguyen</a>.
      </p>
      <div class="flex-grow"></div>
      <ul className="flex space-x-4">
        <li><a href="/privacy" className="text-gray-600 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400">Privacy Policy</a></li>
      </ul>
    </div>
  </div>
</div>
<!-- rts footer area end -->
</file>

<file path="src/views/common/head.ejs">
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title><%= locals.page_name || 'Home' %> | <%= locals.site_name || 'Website' %></title>

<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="manifest" href="/site.webmanifest" />

<!-- keywords -->
<meta name="keywords" content="<%= locals.keywords || locals.clientEnv.SITE_KEYWORDS || 'Website' %>" />

<!-- og -->
<meta property="og:title" content="<%= locals.site_name || 'Website' %>" />
<meta property="og:description" content="<%= locals.description || locals.clientEnv.SITE_DESCRIPTION || 'Website' %>" />
<meta property="og:image" content="<%= locals.image || locals.clientEnv.BASE_URL + '/share.webp' %>" />
<meta property="og:url" content="<%= locals.url || locals.clientEnv.BASE_URL %>" />

<!-- twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:title" content="<%= locals.site_name || 'Website' %>" />
<meta property="twitter:description" content="<%= locals.description || locals.clientEnv.SITE_DESCRIPTION || 'Website' %>" />
<meta property="twitter:image" content="<%= locals.image || locals.clientEnv.BASE_URL + '/share.webp' %>" />
<meta property="twitter:url" content="<%= locals.url || locals.clientEnv.BASE_URL %>" />

<!-- Remix Icons -->
<link href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.min.css" rel="stylesheet" />

<!-- Indie Boosting -->
<link rel="stylesheet" href="https://cdn.indieboosting.com/latest/style.css" />

<!-- Main CSS -->
<link rel="stylesheet" href="/css/style.css" />

<!-- highlight.js -->
<link rel="stylesheet" href="/vendor/highlight/github-dark-dimmed.min.css" />

<!-- Slick -->
<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css" />
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick-theme.css" />

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-PZQ9XM9YPN"></script>
<script>
  window.dataLayer = window.dataLayer || [];

  function gtag() {
    dataLayer.push(arguments);
  }
  gtag('js', new Date());

  gtag('config', 'G-G5RX088ERK');
</script>

<!-- Posthog -->
<script>
  ! function(t, e) {
    var o, n, p, r;
    e.__SV || (window.posthog = e, e._i = [], e.init = function(i, s, a) {
      function g(t, e) {
        var o = e.split(".");
        2 == o.length && (t = t[o[0]], e = o[1]), t[e] = function() {
          t.push([e].concat(Array.prototype.slice.call(arguments, 0)))
        }
      }(p = t.createElement("script")).type = "text/javascript", p.crossOrigin = "anonymous", p.async = !0, p.src = s.api_host.replace(".i.posthog.com", "-assets.i.posthog.com") + "/static/array.js", (r = t.getElementsByTagName("script")[0]).parentNode.insertBefore(p, r);
      var u = e;
      for (void 0 !== a ? u = e[a] = [] : a = "posthog", u.people = u.people || [], u.toString = function(t) {
          var e = "posthog";
          return "posthog" !== a && (e += "." + a), t || (e += " (stub)"), e
        }, u.people.toString = function() {
          return u.toString(1) + ".people (stub)"
        }, o = "init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(" "), n = 0; n < o.length; n++) g(u, o[n]);
      e._i.push([i, s, a])
    }, e.__SV = 1)
  }(document, window.posthog || []);
  posthog.init('phc_xvwqPHJisCu48EfjgckqtZ3pdGQNnUB4Q83sDxgyfmv', {
    api_host: 'https://us.i.posthog.com',
    person_profiles: 'identified_only' // or 'always' to create profiles for anonymous users as well
  })
</script>
</file>

<file path="src/views/pages/home.ejs">
<div class="px-6 py-20 flex flex-col items-center justify-center">
  <div class="text-center bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-8 border border-gray-100 dark:border-gray-700">
    <h1 class="font-bold text-gray-800 dark:text-gray-200">Hello World!</h1>
    <h4 class="mt-4">SearchAPI is a tool that provides API to search data on popular platforms such as Google, Bing, Yahoo, etc.</h4>
    <p>This tool is aimed to provide some simple API endpoints to use in automation platforms.</p>
    <div class="flex flex-wrap justify-center items-center gap-2">
      <% if (!user) { %>
      <a href="/login" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        <i class="ri-login-box-line mr-1"></i> Login
      </a>
      <% } else { %>
      <a href="/logout" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
        <i class="ri-logout-box-line mr-1"></i> Logout
      </a>
      <% } %>
      <a href="/api-docs" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
        <i class="ri-book-open-line mr-1"></i> API Docs
      </a>
      <a href="https://github.com/mrgoonie/savedb" target="_blank" class="bg-black hover:bg-gray-800 text-white font-bold py-2 px-4 rounded">
        <i class="ri-github-line mr-1"></i> Contribute
      </a>
    </div>
  </div>
</div>
</file>

<file path="src/views/pages/login.ejs">
<div class="px-6 pt-20 pb-20 flex flex-col items-center justify-center">
  <div class="text-center bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-8 border border-gray-100 dark:border-gray-700">
    <h1 class="font-bold text-gray-800 dark:text-gray-200">Sign in</h1>
    <div class="flex flex-col space-y-2 mt-6">
      <a href="/login/github" class="flex items-center justify-center px-4 py-2 no-underline bg-gray-800 hover:bg-gray-700 text-white rounded-md transition-colors duration-300 ease-in-out">
        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd" />
        </svg>
        Sign in with GitHub
      </a>
      <a href="/login/google" class="flex items-center justify-center px-4 py-2 no-underline bg-white hover:bg-gray-100 text-gray-700 border border-gray-300 rounded-md transition-colors duration-300 ease-in-out dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-300 dark:border-gray-600">
        <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4" />
          <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853" />
          <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05" />
          <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335" />
          <path d="M1 1h22v22H1z" fill="none" />
        </svg>
        Sign in with Google
      </a>
      <a href="/" class="flex items-center justify-center px-4 py-2 mt-4 no-underline bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors duration-300 ease-in-out">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
        </svg>
        Back to Home
      </a>
    </div>
  </div>
</div>
</file>

<file path="src/server.ts">
/* eslint-disable no-unused-vars */
import type { ApiKey } from "@prisma/client";
import chalk from "chalk";
import cookieParser from "cookie-parser";
import express from "express";
import type { Session, User } from "lucia";
import path from "path";
import swaggerJSDoc from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";
import { fileURLToPath } from "url";
⋮----
import { env } from "@/env";
import { validateSession, verifyRequest } from "@/lib/auth";
import { createInitialPlans } from "@/modules/plan/plans";
import { initWorkspacePermissions } from "@/modules/workspace";
import { apiRouter } from "@/routes/api";
import { authRouter } from "@/routes/auth";
import { pageRouter } from "@/routes/pages";
⋮----
import { swaggerOptions } from "./config";
import { fetchListAIModels } from "./lib/ai/models";
import { initRedis } from "./lib/redis";
import { polarWebhookRouter } from "./routes/webhooks/polar-webhook";
⋮----
interface Locals {
      user: User | null;
      userId: string | null;
      apiKey: ApiKey | null;
      session: Session | null;
      csrfToken: string;
    }
⋮----
// redis
⋮----
// trust cloudflare proxy
⋮----
// webhooks
// NOTE: webhooks should be the first middleware because it handles raw request body
⋮----
// url encoded & body parser
⋮----
// template engine: EJS
⋮----
// assets
⋮----
// API routes
⋮----
// auth middleware: verify request origin & validate session
⋮----
// routes
⋮----
// swagger
⋮----
// error handler
⋮----
// start server
async function startServer()
⋮----
// sync subscription plans in database with Polar
⋮----
// Handle graceful shutdown
⋮----
// ... (other cleanup tasks)
⋮----
// start server
</file>

<file path="tailwind.config.cjs">
/** @type {import('tailwindcss').Config} */
</file>

<file path=".github/workflows/deploy.yml">
name: Deploy Workflow

# TRIGGERS
on:
  push:
    branches:
      # - deploy/*
      - main

# ENVIRONMENT VARIABLES
env:
  GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
  BRANCH_NAME: ${{ github.head_ref || github.ref }}

# CI/CD STEPS
jobs:
  deploy:
    name: Deploy to [www.searchapi.site]
    runs-on: ubuntu-latest
    if: always() && !cancelled() && !failure() && contains(github.ref, 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Deploy with DXUP
        uses: "digitopvn/diginext-actions@v2"
        with:
          api_key: ${{ secrets.DX_API_KEY }}
          cluster: dxupprod
          registry: digitopdockerhub
          deploy_env: prod
          tail: true
          port: 3000
</file>

<file path="src/lib/google/google-search.ts">
import { customsearch } from "@googleapis/customsearch";
import dayjs from "dayjs";
⋮----
import { env } from "@/env";
⋮----
/**
 * Process a single Google search query
 * @private
 */
async function processSingleGoogleSearch(
  query: string,
  options?: {
    limit?: number;
    offset?: number;
    sort?: string;
    from_date?: string;
    to_date?: string;
  }
)
⋮----
/**
 * Perform Google search with support for comma-separated queries
 * @param query - Search query (can contain commas to search for multiple queries in parallel)
 */
export async function googleSearch(
  query: string,
  options?: {
    /**
     * @default 10
     */
    limit?: number;
    /**
     * @default 0
     */
    offset?: number;
    /**
     * @default "date:d"
     */
    sort?: string;
    /**
     * @default null
     */
    from_date?: string;
    /**
     * @default null
     */
    to_date?: string;
  }
)
⋮----
/**
     * @default 10
     */
⋮----
/**
     * @default 0
     */
⋮----
/**
     * @default "date:d"
     */
⋮----
/**
     * @default null
     */
⋮----
/**
     * @default null
     */
⋮----
// Check if query contains commas
⋮----
// Split query by commas and trim whitespace
⋮----
// Process all queries in parallel
⋮----
// Combine all results into a single array
⋮----
// Process single query
⋮----
export async function googleSearchImages(
  query: string,
  options?: {
    limit?: number;
    offset?: number;
    sort?: string;
    from_date?: string;
    to_date?: string;
  }
)
⋮----
const apiKey = env.GOOGLE_API_KEY; // Thay YOUR_API_KEY bằng khóa API của bạn
const cx = env.GOOGLE_SEARCH_ENGINE_ID; // Thay YOUR_SEARCH_ENGINE_ID bằng ID của công cụ tìm kiếm thiết lập bởi bạn
</file>

<file path="src/modules/payment/manage-checkout.ts">
import { OrderStatus, PaymentMethod, PaymentStatus } from "@prisma/client";
import dayjs from "dayjs";
⋮----
import { prisma } from "@/lib/db";
import elasticSend from "@/lib/email/elastic-email";
⋮----
import { createInitialUserPlan, createUserPlan } from "./manage-plans";
⋮----
export async function createPaymentAndOrder(polarCheckoutId: string)
⋮----
// update the order status
⋮----
// create a payment
⋮----
// send a success email
⋮----
export async function subscriptionActive(polarCheckoutId: string, polarSubscriptionId: string)
⋮----
// find the order
⋮----
// create a user plan
⋮----
export async function subscriptionCancel(
  polarSubscriptionId: string,
  options?: { debug?: boolean }
)
⋮----
// update user plan in database
</file>

<file path="src/routes/pages/index.ts">

</file>

<file path="src/views/pages/profile.ejs">
<div class="px-6 py-20 flex flex-col items-center justify-center">
  <div class="w-full h-auto text-center max-w-screen-md">
    <h2 class="text-3xl">Hi, <strong><%- user.name %></strong>!</h2>
    <h1 class="font-bold py-4 text-6xl">Your Profile</h1>

    <!-- PRICING PLANS -->
    <div class="w-full border border-gray-200 dark:border-gray-700 rounded-2xl p-6 relative mb-8 shadow-lg dark:bg-gray-800 transition-all duration-300">
      <h3 class="font-bold text-xl mb-6 text-center dark:text-white flex items-center justify-center">
        <i class="ri-price-tag-3-line mr-2"></i>Plans
      </h3>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 w-full" id="plan-container">
        <% locals.plans.forEach((plan, index) => { %>
        <% const isCurrentPlan = locals.userPlan.planId === plan.id; %>
        <% 
          // Define unique styles for each plan to avoid CSS duplication
          let cardClasses, headerClasses, titleClasses, priceClasses, buttonClasses;
          
          if (isCurrentPlan) {
            cardClasses = "shadow-md border-0 outline outline-2 outline-blue-500 dark:outline-blue-400";
            headerClasses = "bg-blue-500 dark:bg-blue-600";
            titleClasses = "text-white";
            buttonClasses = "bg-green-500 text-white font-medium cursor-default";
          } else {
            cardClasses = "hover:shadow-md hover:scale-[1.02] border-0 outline outline-1 outline-gray-200 dark:outline-gray-700";
            headerClasses = "bg-gray-100 dark:bg-gray-700";
            titleClasses = "text-gray-800 dark:text-white";
            buttonClasses = "bg-blue-500 hover:bg-blue-600 text-white font-medium transition-colors duration-300";
          }
        %>

        <div class="relative flex flex-col h-full overflow-hidden rounded-2xl transition-all duration-300 <%= cardClasses %>" data-id="<%- plan.id %>">

          <!-- Plan Header -->
          <div class="p-4 <%= headerClasses %> text-center relative">
            <h4 class="font-bold text-lg <%= titleClasses %>">
              <%- plan.name %>
            </h4>

            <!-- Plan Badge -->
            <% if(isCurrentPlan) { %>
            <div class="absolute top-0 right-0 bg-blue-600 text-white text-xs font-bold px-3 py-1 rounded-bl-lg shadow-sm">
              <i class="ri-check-line mr-1"></i>Current
            </div>
            <% } %>
          </div>

          <!-- Plan Content -->
          <div class="p-6 text-center bg-white dark:bg-gray-800 flex-grow flex flex-col">
            <!-- Plan Price -->
            <div class="flex items-center justify-center">
              <span class="text-3xl font-bold dark:text-white"><%- plan.price / 100 %></span>
              <span class="text-sm font-normal ml-1 text-gray-700 dark:text-gray-300"><%- plan.currency %></span>
            </div>
            <div class="text-sm text-gray-500 dark:text-gray-400 mb-6">per month</div>

            <!-- Plan Description -->
            <div class="text-xs italic text-gray-600 dark:text-gray-300 mb-6 flex-grow">
              <%- plan.description %>
            </div>

            <!-- Benefits -->
            <div class="text-sm text-gray-600 dark:text-gray-300 mb-6 flex-grow">
              <ul>
                <% plan.benefits.forEach((benefit) => { %>
                <li><%- benefit %></li>
                <% }) %>
              </ul>
            </div>

            <!-- Action Button -->
            <% if(!isCurrentPlan) { %>
            <a href="<%- plan.checkoutUrl %>" class="block w-full py-2 px-4 text-center rounded-lg <%= buttonClasses %>" target="_blank">
              <i class="ri-arrow-up-line mr-1"></i>Upgrade
            </a>
            <% } else { %>
            <div class="block w-full py-2 px-4 text-center rounded-lg <%= buttonClasses %>">
              <i class="ri-check-double-line mr-1"></i>Active Plan
            </div>
            <% } %>
          </div>
        </div>
        <% }); %>
      </div>
    </div>

    <!-- API KEY -->
    <div class="w-full border border-gray-100 dark:border-gray-700 rounded-2xl p-4 relative mb-10 shadow-xl dark:bg-gray-800">
      <h3 class="font-bold mb-2">API keys</h3>
      <div class="flex gap-2 w-full" id="api-key-container">
        <script>
          function createNewApiKey() {
            const name = document.getElementById("api-key-name").value;
            fetch("/api/v1/api_key", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  name
                }),
              })
              .then((res) => res.json())
              .then((data) => {
                if (data.success) {
                  alert("Create new API key successfully");
                  setTimeout(() => {
                    location.reload();
                  }, 1000);
                  return;
                }
                alert(data.message);
              });
          }

          function deleteApiKey(id) {
            fetch(`/api/v1/api_key/${id}`, {
                method: "DELETE",
                headers: {
                  "Content-Type": "application/json",
                },
              })
              .then((res) => res.json())
              .then((data) => {
                if (data.success) {
                  alert("Delete API key successfully");
                  setTimeout(() => {
                    location.reload();
                  }, 1000);
                  return;
                }
                alert(data.message);
              });
          }
        </script>
        <input class=" border border-gray-300 dark:border-gray-600 rounded-xl py-2 px-4 flex-grow" type="text" id="api-key-name" placeholder="API key name" />
        <button class="w-auto flex items-center justify-center py-2 px-8 bg-blue-400 hover:bg-blue-500 transition-all rounded-xl text-white" onclick="createNewApiKey()">
          <i class="ri-add-line mr-2"></i> Create
        </button>
      </div>
      <ul>
        <% locals.apiKeys.forEach((apiKey, index) => { %>
        <li class="flex justify-between items-start text-left border-b border-gray-300 dark:border-gray-600 py-2 gap-2">
          <div class="border border-gray-300 dark:border-gray-600 rounded-md pt-1 pb-2 size-8 text-center">
            <span class="text-gray-500"><%- index + 1 %></span>
          </div>
          <div class="flex-grow">
            <p class="text-base font-bold"><%- apiKey.name %> (<%- apiKey.displayCreatedAt %>)</p>
            <%- include('../common/link-copy', { link: apiKey.key }) %>
          </div>
          <button class="text-red-400 hover:text-red-500 transition-all p-2 border border-red-400 hover:border-red-500 rounded-md" onclick="deleteApiKey('<%- apiKey.id %>')">
            <i class="ri-delete-bin-line"></i>
          </button>
        </li>
        <% }); %>
      </ul>
    </div>

    <div class="flex gap-2 justify-center">
      <%- include("../common/button", {
      content: " <i class='ri-logout-box-line mr-2'></i> Log out",
      href: "/logout",
      className: "bg-red-400 hover:bg-red-500"
    }) %>
      <%- include("../common/button", {
      content: " <i class='ri-home-line mr-2'></i> Home",
      href: "/",
    }) %>
    </div>
  </div>
</div>
</file>

<file path="src/views/master.ejs">
<html lang="en">
<!-- HEAD -->

<head>
  <%- include('common/head', locals) %>
  <script>
    // Immediately invoked function to set the theme on page load
    (function() {
      function getInitialTheme() {
        const savedTheme = localStorage.getItem('theme');
        const systemDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
        return savedTheme === 'dark' || (!savedTheme && systemDarkMode) ? 'dark' : 'light';
      }
      const theme = getInitialTheme();
      document.documentElement.setAttribute('data-mode', theme);
    })();
  </script>
</head>

<!-- BODY -->

<body class="w-full ">
  <!-- HEADER -->
  <% if (typeof locals.headerEnabled === 'undefined' || locals.headerEnabled) { %>
  <%- include('common/header', locals) %>
  <% } %>

  <!-- PAGE -->
  <% if (typeof page !== 'undefined') { %>
  <%- include(page, locals); %>
  <% } %>

  <!-- IndieBoosting -->
  <div class="w-full max-w-3xl mx-auto mb-10 text-center">
    <script src="https://cdn.indieboosting.com/latest/script.js?id=VZTH7M1ILR&maxProducts=9&maxColumns=3&title=Top Indie Products"></script>
  </div>

  <!-- FOOTER -->
  <% if (typeof locals.footerEnabled === 'undefined' || locals.footerEnabled) { %>
  <%- include('common/footer', locals) %>
  <% } %>

  <div id="anywhere-home" class=""></div>

  <!-- pre loader start -->
  <div class="loader-wrapper">
    <div class="loader">
    </div>
    <div class="loader-section section-left"></div>
    <div class="loader-section section-right"></div>
  </div>
  <!-- pre loader end -->

  <!-- Scripts -->
  <!-- Day.js -->
  <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
  <!-- marked.js -->
  <script src="/js/marked.min.js"></script>
  <!-- highlight.js -->
  <script src="/vendor/highlight/highlight.min.js"></script>
  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  <!-- Slick -->
  <link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css" />
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick-theme.css" />
  <script type="text/javascript" src="//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js"></script>
  <!-- Tippy.js -->
  <script src="https://unpkg.com/@popperjs/core@2"></script>
  <script src="https://unpkg.com/tippy.js@6"></script>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- GSAP -->
  <script defer src="/assets/js/plugins/gsap.min.js"></script>

  <!-- Main JS -->
  <script src="/assets/js/main.js"></script>

  <!-- Tippy -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      tippy('.tippy', {
        animation: 'fade',
        duration: 300,
        interactive: true,
      });
    });
  </script>
</body>

</html>
</file>

<file path="src/routes/api/index.ts">
import express from "express";
⋮----
import { apiBingRouter } from "./api-bing";
import { apiGoogleRouter } from "./api-google";
import { apiHealthzRouter } from "./api-healthz";
import { apiKeyRouter } from "./api-key";
import apiOrderRouter from "./api-order";
import { apiPaymentRouter } from "./api-payment";
import { apiProfileRouter } from "./api-profile";
import { apiUploadRouter } from "./api-upload";
⋮----
// middleware
⋮----
// routes
</file>

<file path="src/env.ts">
/* eslint-disable no-unused-vars */
import dotenv from "dotenv";
import z from "zod";
⋮----
export type Env = z.infer<typeof envSchema>;
⋮----
// Extract server env variables
</file>

<file path=".windsurfrules">
## Project Development Information

Main domain: SearchAPI.site

### Tech stack
- Node.js
- Express.js
- Prisma (PostgreSQL)
- EJS
- TailwindCSS
- Commitlint
- Swagger UI

### When working with EJS
always use icons from https://remixicon.com/
always use tailwindcss for styling

### When working with Tailwind or CSS
always implement responsive layout with mobile-first approach
always implement dark mode

### For Express.js project
always import prisma client with: `import { prisma } from "@/lib/db";`
always use async/await for better readability and performance
always use `next()` for error handling of all routers
always use try-catch for fallback error handling
always use zod for validation
write zod schemas in a separate file to make it easy to share
always generate swagger docs for all APIs
always use `bearerAuth` and `ApiKeyAuth` for swagger security

## About The Project

### Description

SearchAPI.site is a tool that provides API to search on some popular platforms such as Google, Bing, Yahoo, etc.

### Available platforms
- [x] Google - Web Search
- [x] Google - Image Search
- [x] Google - YouTube Search
- [ ] Google - Maps Search
- [ ] Bing - Web Search
- [ ] Bing - Image Search
- [ ] Reddit
- [ ] X/Twitter
- [ ] Facebook
- [ ] Instagram
- [ ] TikTok

### Support cloud storages
- AWS S3
- Cloudflare R2

### API Docs

- [Swagger UI](https://searchapi.site/api-docs)

### Support
- If you have any questions or feedback, please contact me at [@goon_nguyen](https://x.com/goon_nguyen).
- If you have any issues or bugs, please report them to us.
- If you have any suggestions or feature requests, please submit them to us.
</file>

<file path="package.json">
{
  "name": "searchapi",
  "version": "1.0.0",
  "main": "src/server.ts",
  "type": "module",
  "scripts": {
    "dev": "concurrently \"tailwindcss -i ./src/styles/global.css -o ./public/css/style.css --watch\" \"tsx watch src/server.ts\"",
    "start": "tsx src/server.ts",
    "db": "prisma generate",
    "db:push": "prisma db push",
    "db:all": "prisma generate && prisma db push",
    "postinstall": "prisma generate",
    "lint": "eslint . --fix --quiet",
    "format": "eslint . --fix --quiet && prettier . --write",
    "check-secret": "node .husky/check-secret.js",
    "check-types": "tsc --project cypress --noEmit --pretty",
    "commit": "git add . && cz && git push origin"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.5.0",
    "@commitlint/config-conventional": "^19.5.0",
    "@commitlint/cz-commitlint": "^19.5.0",
    "@eslint/js": "^9.11.1",
    "@next/eslint-plugin-next": "^14.2.14",
    "@semantic-release/changelog": "^6.0.3",
    "@semantic-release/commit-analyzer": "^13.0.0",
    "@semantic-release/git": "^10.0.1",
    "@semantic-release/github": "^11.0.0",
    "@semantic-release/release-notes-generator": "^14.0.1",
    "@types/bcrypt": "^5.0.2",
    "@types/bun": "^1.1.8",
    "@types/cookie-parser": "^1.4.7",
    "@types/eslint": "^9.6.1",
    "@types/express": "^4.17.21",
    "@types/humanize-duration": "^3.27.4",
    "@types/jsdom": "^21.1.7",
    "@types/lodash": "^4.17.9",
    "@types/multer": "^1.4.12",
    "@types/node": "^20.10.5",
    "@types/pg": "^8.11.8",
    "@types/prettier": "^3.0.0",
    "@types/qrcode": "^1.5.5",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/ua-parser-js": "^0.7.39",
    "@typescript-eslint/eslint-plugin": "^8.8.0",
    "@typescript-eslint/parser": "^8.8.0",
    "commitizen": "^4.3.1",
    "concurrently": "^8.2.2",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.30.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-simple-import-sort": "^12.1.1",
    "eslint-plugin-tailwindcss": "^3.17.4",
    "eslint-plugin-unused-imports": "^4.1.4",
    "globals": "^15.10.0",
    "husky": "^9.1.6",
    "lint-staged": "^15.2.10",
    "prettier": "^3.3.3",
    "prettier-plugin-tailwindcss": "^0.6.8",
    "run-script-os": "^1.1.6",
    "semantic-release": "^24.1.2",
    "tailwindcss": "^3.4.10",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@aws-sdk/client-s3": "^3.658.1",
    "@aws-sdk/node-http-handler": "^3.374.0",
    "@elasticemail/elasticemail-client": "^4.0.26",
    "@googleapis/customsearch": "^3.2.0",
    "@googleapis/youtube": "^20.0.0",
    "@lucia-auth/adapter-prisma": "^4.0.1",
    "@lucia-auth/adapter-sqlite": "^3.0.0",
    "@polar-sh/sdk": "^0.32.13",
    "@prisma/adapter-pg": "^5.19.0",
    "@prisma/client": "^5.19.0",
    "@stablelib/base64": "^2.0.0",
    "@types/swagger-ui-express": "^4.1.7",
    "arctic": "^0.10.2",
    "axios": "^1.7.7",
    "axios-retry": "^4.5.0",
    "bcrypt": "^5.1.1",
    "chalk": "^5.3.0",
    "cookie-parser": "^1.4.6",
    "csrf-csrf": "^3.0.8",
    "dayjs": "^1.11.13",
    "diginext-utils": "^3.13.7",
    "dotenv": "^16.3.1",
    "ejs": "^3.1.10",
    "execa": "^9.4.0",
    "express": "^4.18.2",
    "express-rate-limit": "^7.4.1",
    "fast-sha256": "^1.3.0",
    "http-proxy-agent": "^7.0.2",
    "https-proxy-agent": "^7.0.5",
    "humanize-duration": "^3.32.1",
    "ioredis": "^5.4.1",
    "jimp": "^1.6.0",
    "jsdom": "^25.0.1",
    "jsqr": "^1.4.0",
    "lodash": "^4.17.21",
    "lucia": "^3.2.0",
    "multer": "^1.4.5-lts.1",
    "node-html-parser": "^6.1.13",
    "oslo": "^1.0.3",
    "p-queue": "^8.0.1",
    "pg": "^8.12.0",
    "playwright": "^1.47.2",
    "prisma": "^5.19.0",
    "qrcode": "^1.5.4",
    "slugify": "^1.6.6",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "tsx": "^4.19.1",
    "ua-parser-js": "^1.0.39",
    "youtube-dl-exec": "^3.0.9",
    "zod": "^3.23.8"
  },
  "config": {
    "commitizen": {
      "path": "@commitlint/cz-commitlint"
    }
  },
  "release": {
    "branches": [
      "main"
    ],
    "plugins": [
      "@semantic-release/commit-analyzer",
      "@semantic-release/release-notes-generator",
      "@semantic-release/changelog",
      "@semantic-release/git",
      "@semantic-release/github"
    ]
  }
}
</file>

<file path="src/views/common/header.ejs">
<!-- header area start -->
<header class="header-style-one header--sticky <%= typeof page_slug !== 'undefined' ? page_slug : '' %> bg-white dark:bg-gray-900 shadow-sm">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between py-4">
      <div class="logo-area">
        <a href="/" class="logo font-heading font-bold text-green-500 text-2xl flex items-center gap-2">
          <i class="ri-search-line"></i>
          <%- clientEnv.SITE_NAME %>
          <!-- <img class="light w-36 dark:hidden" src="/images/brand/boost-together-logo-colorful.svg" alt="logo">
          <img class="dark hidden dark:block w-36" src="/images/brand/boost-together-logo-colorful.svg" alt="logo"> -->
        </a>
      </div>
      <nav class="hidden md:block">
        <ul class="flex space-x-6">
          <li class="<%= path_name === "/" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
            <a href="/" class="transition-colors duration-300 font-heading">Home</a>
          </li>
          <li class="<%= path_name === "/pricing" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
            <a href="/pricing" class="transition-colors duration-300 font-heading">Pricing</a>
          </li>
          <li class="<%= path_name === "/contribute" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
            <a href="https://github.com/mrgoonie/searchapi" target="_blank" class="transition-colors duration-300 font-heading">Contribute</a>
          </li>
          <li class="<%= path_name === "/mcp" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
            <a href="https://github.com/mrgoonie/searchapi-mcp-server" target="_blank" class="transition-colors duration-300 font-heading">MCP</a>
          </li>
          <li class="<%= path_name === "/api-docs" ? "text-blue-600 font-semibold" : "text-gray-600 hover:text-blue-600" %>">
            <a href="/api-docs" class="transition-colors duration-300 font-heading">API Docs</a>
          </li>
        </ul>
      </nav>
      <div class="flex items-center space-x-4">
        <% if (user) { %>
        <div class="flex items-center space-x-3">
          <a href="/logout" class="font-heading text-gray-600 hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400 tippy" data-tippy-content="Logout" data-tippy-placement="bottom">
            <i class="ri-logout-box-line"></i>
          </a>
          <span class="font-heading text-gray-700 dark:text-gray-300">
            Hi, <a href="/profile" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 tippy" data-tippy-content="Profile" data-tippy-placement="bottom">
              <%= user.name %> <i class="ri-user-line ml-1"></i>
            </a>
          </span>
          <!-- <a href="/start-review" class="rts-btn btn-primary tippy" data-tippy-content="Start your review now!" data-tippy-placement="bottom-end">
            <i class="ri-rocket-2-line mr-2"></i> Start Review
          </a> -->
        </div>
        <% } else { %>
        <a href="/login" class="rts-btn btn-primary font-heading">Get Started</a>
        <% } %>

        <!-- Mobile menu button -->
        <button class="md:hidden p-2 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700" id="mobile-menu-button">
          <i class="ri-menu-line text-xl"></i>
        </button>
      </div>
    </div>
  </div>

  <%- include('./mobile-menu') %>
</header>
<!-- header area end -->
</file>

<file path="src/routes/api/api-google.ts">
import express from "express";
⋮----
import { validateSession } from "@/lib/auth";
import { googleSearch, googleSearchImages } from "@/lib/google";
import { youtubeSearch } from "@/lib/google/youtube-search";
import { apiKeyAuth } from "@/middlewares/api_key_auth";
import { checkPlanLimits } from "@/middlewares/check-plan-limits";
⋮----
// Google Search API Router
// Tag: GoogleSearch
⋮----
/**
 * @swagger
 * /api/v1/google:
 *   post:
 *     summary: Perform a Google search
 *     tags: [GoogleSearch]
 *     security:
 *       - ApiKeyAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - query
 *             properties:
 *               query:
 *                 type: string
 *               limit:
 *                 type: number
 *                 default: 10
 *               offset:
 *                 type: number
 *                 default: 0
 *               sort:
 *                 type: string
 *                 default: "date:d"
 *               from_date:
 *                 type: string
 *               to_date:
 *                 type: string
 *     responses:
 *       200:
 *         description: Successful search
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: array
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
⋮----
/**
 * @swagger
 * /api/v1/google/images:
 *   post:
 *     summary: Perform a Google image search
 *     tags: [GoogleSearch]
 *     security:
 *       - ApiKeyAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - query
 *             properties:
 *               query:
 *                 type: string
 *               limit:
 *                 type: number
 *                 default: 10
 *               offset:
 *                 type: number
 *                 default: 0
 *               sort:
 *                 type: string
 *                 default: "date:d"
 *               from_date:
 *                 type: string
 *               to_date:
 *                 type: string
 *     responses:
 *       200:
 *         description: Successful image search
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: array
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
⋮----
/**
 * @swagger
 * /api/v1/google/youtube:
 *   post:
 *     summary: Perform a YouTube search
 *     tags: [GoogleSearch]
 *     security:
 *       - ApiKeyAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - query
 *             properties:
 *               query:
 *                 type: string
 *                 description: Search keyword
 *               maxResults:
 *                 type: number
 *                 description: Maximum number of results to return
 *                 default: 10
 *               pageToken:
 *                 type: string
 *                 description: Token for pagination
 *               order:
 *                 type: string
 *                 enum: [date, viewCount, rating, relevance]
 *                 description: Sort order
 *                 default: "relevance"
 *               publishedAfter:
 *                 type: number
 *                 description: Number of days to filter videos from
 *                 example: 3
 *               videoDuration:
 *                 type: string
 *                 enum: [short, medium, long, any]
 *                 description: Filter by video duration
 *                 default: "any"
 *     responses:
 *       200:
 *         description: Successful YouTube search
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *       401:
 *         description: Unauthorized
 *       500:
 *         description: Server error
 */
⋮----
// Calculate publishedAfter date if days are specified
</file>

<file path="README.md">
# SearchAPI.site

### Description

[SearchAPI.site](https://searchapi.site) is a tool that provides API to search on some popular platforms such as Google, Youtube, Bing, Yahoo, etc.

> From the author: I made it for N8N or any automation workflows.

## API Docs

https://searchapi.site/api-docs

## Stack

- [x] Node.js (TypeScript)
- [x] Express.js
- [x] Prisma (PostgreSQL)
- [x] Auth (Lucia)
- [x] Zod
- [x] Template Engine (EJS)
- [x] Styling with TailwindCSS
- [x] Commitlint
- [x] Swagger UI

## Features
- [x] Google - Web Search
  - [x] Search a single keyword
  - [ ] Search multiple keywords
- [x] Google - Image Search
- [x] Google - YouTube Search
- [ ] Google - Maps Search
- [x] Bing - Web Search
- [ ] Bing - Image Search
- [ ] Reddit
- [ ] X/Twitter
- [ ] Facebook Search
- [ ] Facebook Group Search
- [ ] Instagram
- [ ] TikTok

## Development

Create `.env` from `.example.env`

Then:

```bash
bun i
bun dev
# OR
npm i
npm run dev
```

## Docker

```bash
docker build -t local/bun-express-starter -f Dockerfile .
docker run -p 3000:3000 local/bun-express-starter
# OR
docker compose up
```

## Deploy with [DXUP](https://dxup.dev)

```bash
dx up
# dx up --prod
```

## CI/CD

- [x] Github Actions: Create Pull Request to `main` branch will trigger a build and push to `preview` environment
- [x] Github Actions: Merge Pull Request to `main` branch will trigger a build and push to `production` environment

## Author

Please feel free to contribute to this project!

- X: [Goon Nguyen](https://x.com/goon_nguyen)
- CTO at [TOP GROUP](https://wearetopgroup.com), [DIGITOP](https://digitop.vn) & [XinChao Live Music](https://xinchao.world)

## Check out my other products

- [IndieBoosting.com](https://indieboosting.com) - A platform that help you reach your target audience, and accelerate growth effortlessly.
- [DigiCord AI](https://digicord.site) - The Most Useful AI Chatbot on Discord
- [BoostTogether.com](https://boosttogether.com) - The Power of WE in Advertising
- [TopRanking.ai](https://topranking.ai) - AI Directory, listing AI products
- [ZII.ONE](https://zii.one) - Personalized Link Shortener
- [VidCap.xyz](https://vidcap.xyz) - Extract Youtube caption, download videos, capture screenshot, summarize,…
- [ReadTube.me](https://readtube.me) - Write blog articles based on Youtube videos
- [AIVN.Site](https://aivn.site) - Face Swap, Remove BG, Photo Editor,…
- [GetViral.Now](https://getviral.now) - KOL booking better together!
- [SaveDB.site](https://savedb.site) - API to backup your database and store it in the cloud

Thank you!
</file>

</files>
